WEBVTT

00:00:00.000 --> 00:00:01.310
<v Mario Guerra>Alright, we're good.</v>

00:00:02.430 --> 00:00:01.930
<v Ralph Squillace (MODULES)>I'm gonna say something as soon as I right here, I said.</v>

00:00:01.940 --> 00:00:07.950
<v Ralph Squillace (MODULES)>We can record this, heath, but I wanna tell you I'm gonna use four letter words and then went in the transcript.</v>

00:00:08.120 --> 00:00:11.270
<v Ralph Squillace (MODULES)>They star out because Chachi TP is so good.</v>

00:00:11.280 --> 00:00:18.620
<v Ralph Squillace (MODULES)>It stars out the little the swear words, but you will be able to hear the swear words and I mean them in with all the best of affections.</v>

00:00:18.630 --> 00:00:20.500
<v Ralph Squillace (MODULES)>So there you go, Mario, go ahead.</v>

00:00:22.420 --> 00:00:24.810
<v Mario Guerra>Actually this is a yacht meeting so.</v>

00:00:25.100 --> 00:00:26.990
<v Mario Guerra>Well, let me give you some context, right.</v>

00:00:28.060 --> 00:00:28.190
<v Ralph Squillace (MODULES)>Sure.</v>

00:00:30.440 --> 00:00:34.220
<v Ralph Squillace (MODULES)>Umm, right.</v>

00:00:38.330 --> 00:00:40.560
<v Ralph Squillace (MODULES)>Yes, Yep.</v>

00:00:27.000 --> 00:00:40.830
<v Mario Guerra>So when I originally contacted you, Ralph, it was after a conversation with Yash because we were talking about rust and he was saying that he's working on the Rust SDK to support your some work you're doing for Wazee Wasim, all that good stuff.</v>

00:00:40.840 --> 00:00:41.350
<v Mario Guerra>Right.</v>

00:00:41.260 --> 00:00:42.480
<v Ralph Squillace (MODULES)>All that, yes.</v>

00:00:41.520 --> 00:00:47.110
<v Mario Guerra>And so when I reached out to you, I think you know we talked about Wasim and general and Wazee and all this great stuff.</v>

00:00:46.650 --> 00:00:47.450
<v Ralph Squillace (MODULES)>In general, yes.</v>

00:00:54.680 --> 00:00:55.580
<v Ralph Squillace (MODULES)>Right, exactly.</v>

00:00:48.450 --> 00:00:57.520
<v Mario Guerra>Umm, but we never kind of got around to talking about how it pertains to rust and the Rust SDK because I'm the the product manager for the Rust SDK's, right?</v>

00:00:58.490 --> 00:00:58.690
<v Ralph Squillace (MODULES)>Yeah.</v>

00:01:07.620 --> 00:01:07.860
<v Ralph Squillace (MODULES)>Right.</v>

00:00:57.530 --> 00:01:10.390
<v Mario Guerra>So I would very much like to know if there are levers I can use to potentially get Microsoft to invest in supporting these as a tier one or language.</v>

00:01:08.770 --> 00:01:13.150
<v Ralph Squillace (MODULES)>OK, so so that is good.</v>

00:01:13.160 --> 00:01:14.440
<v Ralph Squillace (MODULES)>First of all, I owe you.</v>

00:01:14.450 --> 00:01:20.250
<v Ralph Squillace (MODULES)>There is a debt that I owe you from the first meeting, which was that I was going to follow up with a bunch of links.</v>

00:01:20.290 --> 00:01:23.570
<v Ralph Squillace (MODULES)>We can circle back around to the links, so like make sure that I can bundle up the good ones.</v>

00:01:23.640 --> 00:01:26.130
<v Ralph Squillace (MODULES)>One of the links that always goes to this is yoshio's.</v>

00:01:26.140 --> 00:01:28.870
<v Ralph Squillace (MODULES)>Lync is Yoshi's blog on WASI.</v>

00:01:29.680 --> 00:01:32.190
<v Ralph Squillace (MODULES)>Umm uh, which is fantastic.</v>

00:01:37.850 --> 00:01:38.160
<v Yosh Wuyts>For sure.</v>

00:01:32.200 --> 00:01:39.460
<v Ralph Squillace (MODULES)>So yosh that will be one of the links and I'm just gonna farm that out to you yosh to find it and figure out where you wrote something yourself.</v>

00:01:40.040 --> 00:01:40.350
<v Mario Guerra>OK.</v>

00:01:40.350 --> 00:01:41.240
<v Ralph Squillace (MODULES)>Uh, so let's.</v>

00:01:40.360 --> 00:01:41.550
<v Mario Guerra>Can I just interrupt for a second?</v>

00:01:42.330 --> 00:01:42.660
<v Ralph Squillace (MODULES)>Yeah, sure.</v>

00:01:41.560 --> 00:01:43.960
<v Mario Guerra>Have I been mispronouncing your name this whole time yosh?</v>

00:01:44.950 --> 00:01:45.540
<v Yosh Wuyts>It's fine.</v>

00:01:45.590 --> 00:01:48.040
<v Yosh Wuyts>No, both both pronunciations work for me.</v>

00:01:48.050 --> 00:01:49.600
<v Yosh Wuyts>So you haven't need.</v>

00:01:49.360 --> 00:01:49.640
<v Mario Guerra>OK.</v>

00:01:49.610 --> 00:01:50.010
<v Yosh Wuyts>No one has.</v>

00:01:49.790 --> 00:01:50.230
<v Ralph Squillace (MODULES)>OK.</v>

00:01:50.240 --> 00:01:51.640
<v Ralph Squillace (MODULES)>Wait, wait.</v>

00:01:51.710 --> 00:01:53.410
<v Ralph Squillace (MODULES)>I've called you yosh and I've called you yosh.</v>

00:01:54.010 --> 00:01:54.190
<v Yosh Wuyts>Yes.</v>

00:01:54.370 --> 00:01:57.120
<v Ralph Squillace (MODULES)>Now which one did your mother call you?</v>

00:01:58.100 --> 00:01:59.990
<v Yosh Wuyts>Uh. Spanish.</v>

00:02:02.370 --> 00:02:02.830
<v Ralph Squillace (MODULES)>Joshua.</v>

00:02:00.000 --> 00:02:04.410
<v Yosh Wuyts>So Yoshua neither, but.</v>

00:02:03.130 --> 00:02:05.770
<v Mario Guerra>Ah, short for Joshua, got you.</v>

00:02:05.500 --> 00:02:05.790
<v Ralph Squillace (MODULES)>OK.</v>

00:02:05.800 --> 00:02:06.980
<v Ralph Squillace (MODULES)>Can I call you Yoshua?</v>

00:02:07.240 --> 00:02:07.810
<v Yosh Wuyts>If you'd like to.</v>

00:02:08.970 --> 00:02:10.590
<v Ralph Squillace (MODULES)>I that would fill me with joy.</v>

00:02:12.510 --> 00:02:13.120
<v Yosh Wuyts>That's allowed.</v>

00:02:13.130 --> 00:02:16.510
<v Yosh Wuyts>That's fine, but you know and and you pronunciation works.</v>

00:02:15.040 --> 00:02:18.100
<v Ralph Squillace (MODULES)>That's OK, right?</v>

00:02:18.110 --> 00:02:23.300
<v Ralph Squillace (MODULES)>So my name's Ralph, which is a classic American name which really comes from something like Ralph Edit.</v>

00:02:23.390 --> 00:02:23.620
<v Ralph Squillace (MODULES)>Yeah.</v>

00:02:23.630 --> 00:02:30.540
<v Ralph Squillace (MODULES)>You know I'm Italian background, so I was originally my family name for me would have been roughed, right?</v>

00:02:30.550 --> 00:02:31.570
<v Ralph Squillace (MODULES)>Well, of course.</v>

00:02:31.580 --> 00:02:33.940
<v Ralph Squillace (MODULES)>You know, my dad came to the United States and nobody could pronounce that.</v>

00:02:33.950 --> 00:02:35.320
<v Ralph Squillace (MODULES)>So he called himself Ralph.</v>

00:02:35.370 --> 00:02:36.980
<v Ralph Squillace (MODULES)>Well, I mispronounced my own.</v>

00:02:37.070 --> 00:02:38.050
<v Ralph Squillace (MODULES)>My own last name.</v>

00:02:39.480 --> 00:02:46.350
<v Ralph Squillace (MODULES)>Uh, like all of the family in the United States, until I met my wife, who's southern Italian, and she's the one that pronounces correctly.</v>

00:02:46.360 --> 00:02:46.660
<v Ralph Squillace (MODULES)>Not me.</v>

00:02:47.660 --> 00:02:50.670
<v Ralph Squillace (MODULES)>Alright, so there's a lot of fun going on in this world.</v>

00:02:51.440 --> 00:02:51.840
<v Ralph Squillace (MODULES)>Uh.</v>

00:02:51.840 --> 00:03:02.360
<v Ralph Squillace (MODULES)>So, like, we're gonna let me sketch now from the web sembly idea which, you know, Mario, I sort of like sketched out everything was going on generally before.</v>

00:03:02.370 --> 00:03:08.090
<v Ralph Squillace (MODULES)>But then you know, skipped that on, giving you as many links to fill in the details.</v>

00:03:09.730 --> 00:03:22.870
<v Ralph Squillace (MODULES)>Umm, the critical thing here is to understand that the two aspects that Microsoft is investing in and leaning on are the things that give us democratic scale and the developers space.</v>

00:03:23.810 --> 00:03:26.670
<v Ralph Squillace (MODULES)>And interestingly, web assembly is not one of them.</v>

00:03:28.000 --> 00:03:38.640
<v Ralph Squillace (MODULES)>The web teams web assembly itself has tremendous technical capabilities, but the only way you can use web assembly is if there's a standard to interact with the damn thing, right?</v>

00:03:38.740 --> 00:03:44.250
<v Ralph Squillace (MODULES)>And so in browsers that standard is the spec and W3C for JavaScript bindings.</v>

00:03:45.330 --> 00:03:58.470
<v Ralph Squillace (MODULES)>So there's a kind of a standard for JavaScript engines to be able to create an A A module and grab a function and pass things in and out and you know get returned by us and so forth.</v>

00:03:58.520 --> 00:04:04.890
<v Ralph Squillace (MODULES)>And that's how it becomes democratically useful inside of browsers through JavaScript and this specification.</v>

00:04:05.300 --> 00:04:16.550
<v Ralph Squillace (MODULES)>So you can't just build a web assembly module with random inputs and outputs and expect it to be portalled you one between one runtime and another runtime because they don't all know those.</v>

00:04:16.720 --> 00:04:32.100
<v Ralph Squillace (MODULES)>You know imports and exports, and so it turns out that the democratic scale usage of the feature set of web assembly is is critical for for Microsoft, but only in two cases, and these are the cases that we invest in.</v>

00:04:32.230 --> 00:04:32.830
<v Ralph Squillace (MODULES)>Thank you very much.</v>

00:04:34.120 --> 00:04:42.500
<v Ralph Squillace (MODULES)>And the first one is the component model and the component model is essentially a future.</v>

00:04:42.770 --> 00:04:44.080
<v Ralph Squillace (MODULES)>It's in flight right now.</v>

00:04:44.090 --> 00:04:52.310
<v Ralph Squillace (MODULES)>We're at kind of within a few months, we'll sort of really be talking about Preview 2 or I think they're gonna move to December.</v>

00:04:52.320 --> 00:05:03.510
<v Ralph Squillace (MODULES)>It'll be something like wazee .2 or something like which brings the component model and if you're been around you, you'll think of this as like com or DCOM.</v>

00:05:03.520 --> 00:05:05.960
<v Ralph Squillace (MODULES)>Or maybe CORBA in the Java world and so forth.</v>

00:05:06.030 --> 00:05:06.520
<v Ralph Squillace (MODULES)>You.</v>

00:05:06.530 --> 00:05:15.950
<v Ralph Squillace (MODULES)>You'll you'll be able to treat MODULES as if they export only functionality or or require only functionality on the other side, right?</v>

00:05:16.290 --> 00:05:39.360
<v Ralph Squillace (MODULES)>And once you can do that, then you can take that module and move it to any runtime environment, whether it's in a browser or on an IoT device and a standalone runtime or on AKS and all of the runtimes for web assembly who understand Wasi will be able to run that module and all of a sudden you get like component you get container light explosive reuse.</v>

00:05:40.480 --> 00:05:41.630
<v Ralph Squillace (MODULES)>So that's the first thing.</v>

00:05:42.140 --> 00:05:49.520
<v Ralph Squillace (MODULES)>The other thing that's important about the component model is the radical constriction of the attack surface, right?</v>

00:05:49.530 --> 00:05:59.300
<v Ralph Squillace (MODULES)>So now the the module that you have in front of you can only do one thing, or conversely can only request one service from its host.</v>

00:06:00.210 --> 00:06:06.330
<v Ralph Squillace (MODULES)>So things like log 4 J you could actually put log 4J in the web assembly in WASI in the component, right?</v>

00:06:06.390 --> 00:06:16.740
<v Ralph Squillace (MODULES)>But it just can't work because it only has one path, one structured path to the host, and that configuration doesn't include the stuff that logged for JS does so for.</v>

00:06:17.750 --> 00:06:37.530
<v Ralph Squillace (MODULES)>Democratic usage capabilities and for scale out network effect and for security constriction the component model is critical when we typically refer to the component model in a kind of an offhand way yosh can be a lot more concrete and engineers can be a lot more concrete when they're working upstream with this stuff.</v>

00:06:37.540 --> 00:06:56.440
<v Ralph Squillace (MODULES)>But the offhand way of thinking about this is just Wasi, and the reason we talk about Wasi and not so much about the component model is because the WASI is a essentially a kind of virtualized kernel list of syscalls that are composed of component model interfaces, right?</v>

00:06:56.630 --> 00:07:11.300
<v Ralph Squillace (MODULES)>So you need the component model to sit WASI as a virtualized kernel on top of web assembly modules, so those are the two things we invest in component model stuff and WASI writ large.</v>

00:07:12.090 --> 00:07:22.880
<v Ralph Squillace (MODULES)>We invest in any any web, any language that compiles directly to WASI and the component model go is just added preview to capabilities.</v>

00:07:22.890 --> 00:07:25.890
<v Ralph Squillace (MODULES)>Rust and JavaScript are sort of the leading edge of.</v>

00:07:26.930 --> 00:07:28.460
<v Ralph Squillace (MODULES)>Compatibility with wasi.</v>

00:07:28.980 --> 00:07:50.870
<v Ralph Squillace (MODULES)>Although seeing C also because they go through LLVM like Rust does, ultimately they they're very compatible as well, but almost all of the languages are now targeting that, and one of the things that I do want to add here is that Microsoft is making steps across all kinds of places.</v>

00:07:50.880 --> 00:07:52.370
<v Ralph Squillace (MODULES)>So for example this is.</v>

00:07:52.930 --> 00:08:01.130
<v Ralph Squillace (MODULES)>I'll put this in here in the chat, but then yosh, you go ahead and organize it in the notes section because I'm thinking and not doing right now.</v>

00:08:01.420 --> 00:08:01.700
<v Yosh Wuyts>For sure.</v>

00:08:01.520 --> 00:08:17.790
<v Ralph Squillace (MODULES)>That's a VS codes and they have implemented Wasi preview one in on top of node and JavaScript and so that allows as that migrates to Preview 2 and to these more complex later versions.</v>

00:08:17.800 --> 00:08:34.570
<v Ralph Squillace (MODULES)>The When you have threading and async and the whole thing, you'll actually be able to run MODULES just directly in VS code and do direct debugging directly in there and so forth, and that'll work both online because it's sitting on top of JavaScript and that also worked locally.</v>

00:08:34.580 --> 00:08:38.650
<v Ralph Squillace (MODULES)>So you'll be able to think that particular extension will run anywhere.</v>

00:08:38.770 --> 00:08:40.390
<v Ralph Squillace (MODULES)>It just moves around and runs.</v>

00:08:40.640 --> 00:08:43.750
<v Ralph Squillace (MODULES)>It uses Python as it's kind of example language.</v>

00:08:43.760 --> 00:08:51.920
<v Ralph Squillace (MODULES)>It's the Python compiled awuzie then runs in VS code natively, and so you can do a kind of a crud experience, right?</v>

00:08:52.450 --> 00:08:53.060
<v Ralph Squillace (MODULES)>Umm.</v>

00:08:53.670 --> 00:08:54.240
<v Ralph Squillace (MODULES)>Repel.</v>

00:08:54.250 --> 00:08:58.240
<v Ralph Squillace (MODULES)>Kind of thing, you know, depending on how you wanna call it repel.</v>

00:08:58.490 --> 00:08:59.260
<v Ralph Squillace (MODULES)>Playground.</v>

00:08:59.270 --> 00:09:04.550
<v Ralph Squillace (MODULES)>Whatever you might call it and then from there you can compile out to a web assembly module and so forth.</v>

00:09:06.110 --> 00:09:11.460
<v Ralph Squillace (MODULES)>So those are the two core areas we're not investing in wasm per se.</v>

00:09:11.710 --> 00:09:27.990
<v Ralph Squillace (MODULES)>We're investing in components in the web assembly system interface and again, for that reason, we're those standards that will eventually reside in the W3C and a essentially all languages are sort of converging on that right.</v>

00:09:28.220 --> 00:09:28.950
<v Ralph Squillace (MODULES)>Very important.</v>

00:09:30.040 --> 00:09:30.450
<v Ralph Squillace (MODULES)>OK.</v>

00:09:30.940 --> 00:09:33.510
<v Ralph Squillace (MODULES)>So that's why that that's what we're paying.</v>

00:09:33.580 --> 00:09:37.230
<v Ralph Squillace (MODULES)>We're paying for upstream and also internally.</v>

00:09:37.240 --> 00:09:43.660
<v Ralph Squillace (MODULES)>So internally I think I gave you umm, although I don't do not know.</v>

00:09:43.670 --> 00:09:46.180
<v Ralph Squillace (MODULES)>So I'm gonna go ahead and give it to you.</v>

00:09:46.990 --> 00:09:57.950
<v Ralph Squillace (MODULES)>The Wazee node pool docs, so the internally we're now talking about services where a service investments for customers internally.</v>

00:09:59.070 --> 00:10:02.110
<v Ralph Squillace (MODULES)>We have been using Wasi Wasi Nodepools.</v>

00:10:02.120 --> 00:10:04.690
<v Ralph Squillace (MODULES)>This is the AKS Wasi Nodepool preview.</v>

00:10:04.700 --> 00:10:07.160
<v Ralph Squillace (MODULES)>This allows web assembly components.</v>

00:10:07.290 --> 00:10:08.110
<v Ralph Squillace (MODULES)>They're not true.</v>

00:10:08.120 --> 00:10:10.860
<v Ralph Squillace (MODULES)>Components are essentially single modules and implement WASI.</v>

00:10:10.870 --> 00:10:15.400
<v Ralph Squillace (MODULES)>This is preview one and you can use three different open source runtimes.</v>

00:10:15.470 --> 00:10:27.040
<v Ralph Squillace (MODULES)>One that we have called slight from slight, you can actually call 6 different kinds of Azure services and so it's a serverless kind of function model.</v>

00:10:27.050 --> 00:10:37.950
<v Ralph Squillace (MODULES)>So basically the list of these services that you know, interface capabilities that we support in slight are typically referred to as Wasi Cloud core.</v>

00:10:40.290 --> 00:10:46.220
<v Ralph Squillace (MODULES)>That's a proposal in the upstream, in the Byte Code Alliance that would be part of the W3C specification.</v>

00:10:46.230 --> 00:10:49.850
<v Ralph Squillace (MODULES)>Ultimately, but the was yes.</v>

00:10:55.840 --> 00:10:56.290
<v Ralph Squillace (MODULES)>Yeah.</v>

00:10:50.160 --> 00:10:56.620
<v Mario Guerra>Ralph, when you say upstream, are you talking about LLVM or you talking about WASI consortium or something else?</v>

00:10:56.300 --> 00:10:57.150
<v Ralph Squillace (MODULES)>So I'm.</v>

00:10:57.160 --> 00:11:06.270
<v Ralph Squillace (MODULES)>I'm usually when I say upstream, I usually talk about the the generally I'm talking about the web assembly, system interface and component ecosystem.</v>

00:11:06.320 --> 00:11:17.490
<v Ralph Squillace (MODULES)>Upstream, about 80% of which 70% of which revolves around the Bytecode Alliance Foundation, and Microsoft is a founding member of the Bytecode Alliance Foundation.</v>

00:11:19.120 --> 00:11:20.790
<v Ralph Squillace (MODULES)>I'm the board member for Microsoft.</v>

00:11:20.800 --> 00:11:21.900
<v Ralph Squillace (MODULES)>That wouldn't be surprising.</v>

00:11:23.380 --> 00:11:30.270
<v Ralph Squillace (MODULES)>And so that foundation is not as loud as something like the yellow for the OR the OR the CNCF.</v>

00:11:31.150 --> 00:11:34.080
<v Ralph Squillace (MODULES)>UM, generally because we're much more focused.</v>

00:11:34.090 --> 00:11:35.640
<v Ralph Squillace (MODULES)>It doesn't cost as much money for us.</v>

00:11:35.650 --> 00:11:37.240
<v Ralph Squillace (MODULES)>It's it's run for engineers.</v>

00:11:37.550 --> 00:11:55.060
<v Ralph Squillace (MODULES)>It literally is a very kind of lean foundation design to support the engineers from all kinds of companies, including Microsoft Building functionality to create this entire kind of agnostic language, OS and architecture agnostic component model.</v>

00:11:55.380 --> 00:12:06.020
<v Ralph Squillace (MODULES)>So when I say upstream, I generally mean hey, somewhere up there in foundation land, but almost all the time when I talk about web assembly, I'm talking about the bytecode alliance.</v>

00:12:06.030 --> 00:12:07.510
<v Ralph Squillace (MODULES)>There are a couple of variations.</v>

00:12:08.760 --> 00:12:15.940
<v Ralph Squillace (MODULES)>So for example, that AKS was a nodepool preview that runs three different engines.</v>

00:12:16.130 --> 00:12:20.230
<v Ralph Squillace (MODULES)>Then there's all serverless based, you know kind of function type things.</v>

00:12:20.970 --> 00:12:21.480
<v Ralph Squillace (MODULES)>Umm.</v>

00:12:21.930 --> 00:12:28.900
<v Ralph Squillace (MODULES)>And each one of those things uses web assembly, but at each one uses in a different way, and so the question is, well, how can I host those in AKS?</v>

00:12:29.470 --> 00:12:37.320
<v Ralph Squillace (MODULES)>And so one of our upstream strategies is to ensure that everybody in Kubernetes can do that.</v>

00:12:37.370 --> 00:12:45.740
<v Ralph Squillace (MODULES)>And we built this project Runwasi and that's part of the CNCF's container D project.</v>

00:12:45.810 --> 00:12:48.320
<v Ralph Squillace (MODULES)>And so that would be part of our upstreams strategy.</v>

00:12:48.750 --> 00:13:12.530
<v Ralph Squillace (MODULES)>But it's not BCA, and this is one of those areas that is very much sort of CNCF kind of this is an integration into Kubernetes, it is the infrastructure that we run that we create these the Shim for that we host in AKS all of that runwasi is unlike any other container dementation runwasi is rust.</v>

00:13:14.300 --> 00:13:26.770
<v Ralph Squillace (MODULES)>So that means that the AKS wasi nodepools system is is completely rust based and that's unique, and then you're not unique, but it's very rare in the Kubernetes ecosystem.</v>

00:13:27.360 --> 00:13:30.530
<v Ralph Squillace (MODULES)>Now we host spin from fermion.</v>

00:13:36.820 --> 00:13:36.930
<v Ralph Squillace (MODULES)>Yes.</v>

00:13:31.840 --> 00:13:40.180
<v Mario Guerra>So just to be clear, so this AKS was he node pool is in Azure service and it's built on rust, OK.</v>

00:13:40.490 --> 00:13:41.080
<v Ralph Squillace (MODULES)>Yeah.</v>

00:13:41.090 --> 00:13:43.160
<v Ralph Squillace (MODULES)>Yes, you're the integration pieces.</v>

00:13:45.340 --> 00:13:46.080
<v Mario Guerra>Right. Well.</v>

00:13:43.170 --> 00:13:50.820
<v Ralph Squillace (MODULES)>Of course Kubernetes is go, but the integration that allows us to connect it to Kubernetes seamlessly is rust.</v>

00:13:50.890 --> 00:13:57.080
<v Ralph Squillace (MODULES)>So if you go to that container derun WASI repository, if you go through the source code, you'll find that it's all rust.</v>

00:13:58.390 --> 00:14:01.780
<v Ralph Squillace (MODULES)>It's all good old fashioned memory.</v>

00:14:01.790 --> 00:14:09.190
<v Ralph Squillace (MODULES)>Safe crap that those rusties like you like yosh really like umm, so that's part of it.</v>

00:14:10.180 --> 00:14:13.590
<v Ralph Squillace (MODULES)>Now it gets better to.</v>

00:14:13.600 --> 00:14:24.710
<v Ralph Squillace (MODULES)>That's actually a crate, and so to create an implementation that you plug in to to Kubernetes, uh, you actually will use that as a crate and create your own customization.</v>

00:14:25.200 --> 00:14:37.960
<v Ralph Squillace (MODULES)>We have three different app hosts that are customizations of that create and those 3 app hosts are in the Lazy Nodepool preview and that repo just so you know is here.</v>

00:14:41.190 --> 00:14:48.160
<v Ralph Squillace (MODULES)>Uh, container D wasm shims alright and that repo.</v>

00:14:46.560 --> 00:14:49.330
<v Mario Guerra>What is spin fermion slight from Microsoft mean?</v>

00:14:50.710 --> 00:14:54.400
<v Ralph Squillace (MODULES)>Those are the different applications that we support in an KS.</v>

00:14:55.070 --> 00:14:55.270
<v Mario Guerra>OK.</v>

00:14:54.770 --> 00:14:59.340
<v Ralph Squillace (MODULES)>Spin is an open source serverless framework from a company called Fermion.</v>

00:14:59.540 --> 00:15:06.300
<v Ralph Squillace (MODULES)>That used to be my developers and then they abandoned me to make way too much money as a startup.</v>

00:15:06.590 --> 00:15:08.160
<v Ralph Squillace (MODULES)>And I'm still a little bitter.</v>

00:15:08.170 --> 00:15:09.480
<v Ralph Squillace (MODULES)>But they really do good work.</v>

00:15:09.490 --> 00:15:13.040
<v Ralph Squillace (MODULES)>So and it's open source, so that's fine.</v>

00:15:13.910 --> 00:15:15.760
<v Ralph Squillace (MODULES)>Slight is from my team.</v>

00:15:15.890 --> 00:15:23.070
<v Ralph Squillace (MODULES)>It is also known as Spider lightning for people who care.</v>

00:15:23.360 --> 00:15:24.240
<v Ralph Squillace (MODULES)>That's here.</v>

00:15:25.740 --> 00:15:35.410
<v Ralph Squillace (MODULES)>I'm a spider like and spider lightning is not intended to be a A customer production runtime app host.</v>

00:15:35.420 --> 00:15:52.290
<v Ralph Squillace (MODULES)>It's intended to provide support for that set of serverless interfaces that capabilities Wasi, cloud core, and so we actually use Spider Lightning as a way of getting customers used to the AKS preview so that they understand how to use Azure services.</v>

00:15:52.420 --> 00:15:54.280
<v Ralph Squillace (MODULES)>They understand they can use other services.</v>

00:15:54.290 --> 00:16:00.020
<v Ralph Squillace (MODULES)>You know that you can connect to container services, so for example these capabilities or abstract capabilities.</v>

00:16:00.030 --> 00:16:03.640
<v Ralph Squillace (MODULES)>So there's a KV interface, a key value interface.</v>

00:16:03.650 --> 00:16:11.530
<v Ralph Squillace (MODULES)>Well, they can hit Cosmos with that, but they could also hit Redis in a container for example, and so developers get to use that.</v>

00:16:12.330 --> 00:16:19.410
<v Ralph Squillace (MODULES)>The main we have 23 customers on AKS was he was he notable?</v>

00:16:23.760 --> 00:16:28.510
<v Ralph Squillace (MODULES)>The main customers that we have running are SAP.</v>

00:16:29.390 --> 00:16:37.320
<v Ralph Squillace (MODULES)>VW Sitecore, which is one of the largest windows containers users on at Microsoft.</v>

00:16:37.990 --> 00:16:42.640
<v Ralph Squillace (MODULES)>Uh, and then a bunch of interesting ones that cross the spectrum.</v>

00:16:42.650 --> 00:16:51.150
<v Ralph Squillace (MODULES)>Schneider Electric, Right, which is a European uh companies, Siemens is now using it.</v>

00:16:51.890 --> 00:16:53.980
<v Ralph Squillace (MODULES)>Uhm.</v>

00:16:54.250 --> 00:16:59.750
<v Ralph Squillace (MODULES)>Zeiss uhm, there's a few others. Also.</v>

00:16:59.760 --> 00:17:01.480
<v Ralph Squillace (MODULES)>Hashicorp is using it.</v>

00:17:01.990 --> 00:17:03.640
<v Ralph Squillace (MODULES)>Umm Hashi corps.</v>

00:17:06.690 --> 00:17:18.790
<v Ralph Squillace (MODULES)>About those are the largest ones that are using it and we and we have chatted with almost all of them and every single one pretty much loves the service.</v>

00:17:18.800 --> 00:17:40.200
<v Ralph Squillace (MODULES)>They got it running, so we got them success two, they started to see the benefit of it, which is mainly cost because you can run a little teeny things and you can run them super fast and you can so you can increase your density and you can lower the number of nodes, but it's also cost in the sense that they see this as the foundation for their future iteration of their flagship products.</v>

00:17:40.290 --> 00:17:42.640
<v Ralph Squillace (MODULES)>So we had a great conversation with SAP.</v>

00:17:42.990 --> 00:17:50.940
<v Ralph Squillace (MODULES)>They figured they might use this within two to three years, but they needed to run it because they had to understand whether it was possible to take.</v>

00:17:50.990 --> 00:17:59.910
<v Ralph Squillace (MODULES)>So they're the SAP conversation was interesting because they actually have a giant monolith now mega container like 20 gigabytes or something like this.</v>

00:18:00.220 --> 00:18:02.560
<v Ralph Squillace (MODULES)>And for their poor product.</v>

00:18:03.920 --> 00:18:05.720
<v Ralph Squillace (MODULES)>And they realized that's untenable.</v>

00:18:05.730 --> 00:18:12.900
<v Ralph Squillace (MODULES)>They gotta break it down into pieces, but it's like it's so big that they don't know how to do it.</v>

00:18:12.960 --> 00:18:27.790
<v Ralph Squillace (MODULES)>And so the ability this preview allows you to run web assemblies in the same cluster in the same node and also in the same pod very shortly as containers, which means you don't have to switch platforms.</v>

00:18:28.340 --> 00:18:31.880
<v Ralph Squillace (MODULES)>So if you're running with containers and Kubernetes right now, you can just add these.</v>

00:18:32.910 --> 00:18:34.880
<v Ralph Squillace (MODULES)>You don't have to change anything else.</v>

00:18:34.970 --> 00:18:38.000
<v Ralph Squillace (MODULES)>It all just works like coordinates, right?</v>

00:18:38.840 --> 00:18:43.490
<v Ralph Squillace (MODULES)>And customers love that because there were not telling them like we told them with containers.</v>

00:18:43.500 --> 00:18:45.580
<v Ralph Squillace (MODULES)>Oh, guess what, your VM suck.</v>

00:18:45.900 --> 00:18:48.820
<v Ralph Squillace (MODULES)>You gotta use this other thing you know, kind of deal.</v>

00:18:49.730 --> 00:18:56.980
<v Ralph Squillace (MODULES)>So those, so those are the bigger customers when we go with this, this story is really, really good for them.</v>

00:18:57.430 --> 00:18:59.820
<v Ralph Squillace (MODULES)>They can see that this is going to be the future.</v>

00:19:00.130 --> 00:19:05.900
<v Ralph Squillace (MODULES)>Now that's the sort of mega scale, but the interesting thing is the might of the mini scale.</v>

00:19:06.430 --> 00:19:20.600
<v Ralph Squillace (MODULES)>There's this thing called Edge Essentials which is AKS IoT and you can think of Edge Essentials essentially being single node or two node K3D clusters, and typically we sell them with IoT.</v>

00:19:20.610 --> 00:19:23.450
<v Ralph Squillace (MODULES)>We sell them connected over Azure Arc, right?</v>

00:19:24.430 --> 00:19:31.920
<v Ralph Squillace (MODULES)>And so these are relatively small things, but in March.</v>

00:19:34.340 --> 00:19:37.870
<v Ralph Squillace (MODULES)>It deep we go in March.</v>

00:19:38.060 --> 00:19:42.420
<v Ralph Squillace (MODULES)>We were the IT team used the same infrastructure.</v>

00:19:43.680 --> 00:19:47.780
<v Ralph Squillace (MODULES)>Uh, where we go, there we go, the same infrastructure.</v>

00:19:51.400 --> 00:19:56.770
<v Ralph Squillace (MODULES)>And demoed running single node web assembly AI on the edge.</v>

00:19:56.820 --> 00:20:07.560
<v Ralph Squillace (MODULES)>Little inferencing like image recognition and so forth and the image recognition module for this is like less than two megabytes and people are like, oh, my God, I love that.</v>

00:20:07.890 --> 00:20:09.430
<v Ralph Squillace (MODULES)>So this is Kubernetes.</v>

00:20:09.810 --> 00:20:14.240
<v Ralph Squillace (MODULES)>It's the same infrastructure as a KS Mega, you know, like hyperscale Lucas.</v>

00:20:14.590 --> 00:20:28.580
<v Ralph Squillace (MODULES)>But it's like sitting under somebody's desktop or sitting on an inventory warehouse and doing what we what we typically call right now, what they really want is not the mega LLM stuff, you know, the chat GDP crap that we're hearing so much about right now.</v>

00:20:29.170 --> 00:20:31.110
<v Ralph Squillace (MODULES)>What they really want is utility and prancing.</v>

00:20:31.120 --> 00:20:34.480
<v Ralph Squillace (MODULES)>They want really small models that do things like, hey, is that too hot?</v>

00:20:34.530 --> 00:20:35.300
<v Ralph Squillace (MODULES)>Is it red?</v>

00:20:35.310 --> 00:20:36.040
<v Ralph Squillace (MODULES)>Is it a human?</v>

00:20:36.050 --> 00:20:36.860
<v Ralph Squillace (MODULES)>Is it an animal?</v>

00:20:36.870 --> 00:20:39.300
<v Ralph Squillace (MODULES)>Is it moving like those kinds of things?</v>

00:20:39.310 --> 00:20:41.540
<v Ralph Squillace (MODULES)>And those models are really, really small right now.</v>

00:20:42.070 --> 00:20:45.570
<v Ralph Squillace (MODULES)>And so it's those kinds of things that warehouses want.</v>

00:20:45.580 --> 00:20:47.320
<v Ralph Squillace (MODULES)>Shopping centers want markets.</v>

00:20:47.330 --> 00:20:51.400
<v Ralph Squillace (MODULES)>Want restaurants want KFC wants this for?</v>

00:20:51.770 --> 00:21:10.740
<v Ralph Squillace (MODULES)>They've got two node K3's clusters sitting on there in their restaurant and it's running the point of sale thing, projecting HTML5 right and they want this to actually be able to like, do kind of low scale utility inferencing for various things.</v>

00:21:10.750 --> 00:21:13.690
<v Ralph Squillace (MODULES)>If they show something and just pops in and all this kind of stuff.</v>

00:21:13.760 --> 00:21:15.490
<v Ralph Squillace (MODULES)>So that gives you an idea of the workload.</v>

00:21:15.500 --> 00:21:17.660
<v Ralph Squillace (MODULES)>For that one, as opposed to the AKS people?</v>

00:21:18.460 --> 00:21:27.410
<v Ralph Squillace (MODULES)>Umm, now there's a third one that is is in extremely high demand and this one is probably really, really important as well recent.</v>

00:21:27.500 --> 00:21:35.620
<v Ralph Squillace (MODULES)>So I mentioned Sitecore Umm site court is the largest consumer of windows containers in AKS.</v>

00:21:35.990 --> 00:21:38.260
<v Ralph Squillace (MODULES)>It's a quite a massive spend that they do.</v>

00:21:38.270 --> 00:21:40.830
<v Ralph Squillace (MODULES)>That means C sharp and so.</v>

00:21:40.930 --> 00:21:43.150
<v Ralph Squillace (MODULES)>Oh, that's great.</v>

00:21:43.920 --> 00:21:50.790
<v Ralph Squillace (MODULES)>But Sankore is basically a giant, you know, headless CMS company, right?</v>

00:21:50.800 --> 00:21:54.810
<v Ralph Squillace (MODULES)>Like they help companies build websites and the companies they help build.</v>

00:21:54.820 --> 00:21:59.430
<v Ralph Squillace (MODULES)>Websites are mainly enterprise companies, so it turns out their customers are really mostly our customers.</v>

00:22:01.520 --> 00:22:17.090
<v Ralph Squillace (MODULES)>To do that, there are they're offering front end developers the ability to cut their latency without actually rebuilding their their front end development by hosting a bunch of small fast compute on CDN, not in hyperscale.</v>

00:22:17.960 --> 00:22:23.260
<v Ralph Squillace (MODULES)>And the customer and the the companies they used to do that are cloud flare and fastly.</v>

00:22:23.270 --> 00:22:27.030
<v Ralph Squillace (MODULES)>You may have heard of this CDN compute on the edge kind of thing.</v>

00:22:27.380 --> 00:22:40.930
<v Ralph Squillace (MODULES)>That is all built essentially on web assembly, but originally it was really built on JavaScript and JavaScript compiles down into bytecode and the JavaScript bytecode is very similar, but not the same to web assembly.</v>

00:22:41.330 --> 00:22:50.590
<v Ralph Squillace (MODULES)>And So what Azure front door is now doing because site core I'm going to type the name of this out.</v>

00:22:51.500 --> 00:23:01.060
<v Ralph Squillace (MODULES)>Sitecore just sign with Microsoft the $200 million consumption Mac on based on 2 promises.</v>

00:23:01.070 --> 00:23:06.190
<v Ralph Squillace (MODULES)>One that we were going to implement CDN functions equivalent.</v>

00:23:06.350 --> 00:23:18.640
<v Ralph Squillace (MODULES)>The equivalent compete to cloud flare and to fastly and two that we would make it possible to balance the workloads between AKS which they love and also those edge functions.</v>

00:23:18.790 --> 00:23:21.670
<v Ralph Squillace (MODULES)>And we actually do that with Wasi.</v>

00:23:22.430 --> 00:23:42.240
<v Ralph Squillace (MODULES)>So the high order bit with Azure Edge AFD Edge actions is that's the cloud flare compete, those are up and running right now internally and site core is going to have a private preview on also Walmart and I think a couple others I can get you the list.</v>

00:23:43.190 --> 00:23:51.960
<v Ralph Squillace (MODULES)>I'm gonna have private previews this fall, and then there will be a public preview going toward the end of this calendar year and maybe at the beginning of next calendar year, something like that.</v>

00:23:52.760 --> 00:23:57.660
<v Ralph Squillace (MODULES)>And all of those are built on web assembly and the component model.</v>

00:23:57.670 --> 00:24:02.190
<v Ralph Squillace (MODULES)>Why the and the component model not generic web assembly Wasi and the component model?</v>

00:24:02.560 --> 00:24:17.850
<v Ralph Squillace (MODULES)>So the interesting thing is some of the work that yosh is doing right now upstream will come back and be the system that we use for both AKS and AKS Edge Essentials and upstream open source cornettes.</v>

00:24:17.860 --> 00:24:18.020
<v Ralph Squillace (MODULES)>Right.</v>

00:24:18.030 --> 00:24:22.370
<v Ralph Squillace (MODULES)>You can run this anywhere and also front door edge actions.</v>

00:24:22.380 --> 00:24:30.910
<v Ralph Squillace (MODULES)>So the standard that Yosh is working on right now is what we use in all of these locations in.</v>

00:24:30.070 --> 00:24:31.610
<v Mario Guerra>Does that tie us back to rust?</v>

00:24:32.740 --> 00:24:33.770
<v Ralph Squillace (MODULES)>Yeah and.</v>

00:24:32.950 --> 00:24:35.210
<v Mario Guerra>When you say the work that that you yosh is doing.</v>

00:24:36.340 --> 00:24:37.490
<v Ralph Squillace (MODULES)>Yes, in some sense.</v>

00:24:37.500 --> 00:24:51.030
<v Ralph Squillace (MODULES)>So the work at Yosh Yosh is doing is in rust upstream in the threading area, and in the component model in WASI area, and then into the rust engine like the cargo tooling and so forth.</v>

00:24:51.040 --> 00:24:53.890
<v Ralph Squillace (MODULES)>And for somebody like yosh, that's pure rust, right?</v>

00:24:53.900 --> 00:24:58.190
<v Ralph Squillace (MODULES)>Like, that's the rust ecosystem and the language tool, the language, tool chain and so forth.</v>

00:24:58.460 --> 00:25:00.800
<v Ralph Squillace (MODULES)>But I actually mean rust in the more direct sense.</v>

00:25:02.100 --> 00:25:06.220
<v Ralph Squillace (MODULES)>The AKS infrastructure that we built is built in rust, not go.</v>

00:25:07.550 --> 00:25:17.080
<v Ralph Squillace (MODULES)>The AKS infrastructure that we use, which is the same infrastructure for any other Kubernetes cluster open source Kubernetes cluster that is connected over Azure Arc or something like.</v>

00:25:17.130 --> 00:25:17.860
<v Ralph Squillace (MODULES)>That's rust.</v>

00:25:17.870 --> 00:25:20.030
<v Ralph Squillace (MODULES)>It's the same infrastructure, right?</v>

00:25:20.100 --> 00:25:23.810
<v Ralph Squillace (MODULES)>And in fact, yosh, we've used yosh as a bit of a consultant here and there.</v>

00:25:23.900 --> 00:25:28.630
<v Ralph Squillace (MODULES)>Yoshio's actually had some input periodically where we like, OK, that's the way you wanna do it.</v>

00:25:28.640 --> 00:25:31.190
<v Ralph Squillace (MODULES)>And so forth, Pence third.</v>

00:25:31.200 --> 00:25:40.780
<v Ralph Squillace (MODULES)>Thirdly, the infrastructure for Azure front door edge actions is in fact rust because that is a project called hyperlight.</v>

00:25:42.120 --> 00:25:56.690
<v Ralph Squillace (MODULES)>Hyperlight is a VM very fast bare metal, very small VM server and that is used in AFD's infrastructure to give each module protection.</v>

00:25:57.740 --> 00:25:58.170
<v Ralph Squillace (MODULES)>Umm.</v>

00:25:58.260 --> 00:26:10.220
<v Ralph Squillace (MODULES)>Hostile multitenant protection because we can't really trust we can trust the web assembly sandbox boundary security wise tool about a 95th percentile, maybe even 98th percentile.</v>

00:26:10.230 --> 00:26:18.460
<v Ralph Squillace (MODULES)>Almost everything is probably safe there, even to hostile multitenant attacks by a determined adversary.</v>

00:26:18.710 --> 00:26:35.700
<v Ralph Squillace (MODULES)>However, we well know that any runtime can have CVE's, can have bugs and forth and so forth, and so to protect against that possibility, and it has happened over the last year that we've had the preview right.</v>

00:26:36.160 --> 00:26:50.430
<v Ralph Squillace (MODULES)>So we've had the Rev the runtime because there was a CVE that allowed escalation umm to protect against that we we are obligated in CDN compute to protect each module with a hypervisor.</v>

00:26:50.600 --> 00:26:56.360
<v Ralph Squillace (MODULES)>Now the problem with that is you can't achieve any more density than we have in hyperscale and hype and CDN.</v>

00:26:56.490 --> 00:26:58.330
<v Ralph Squillace (MODULES)>They have very much much much smaller.</v>

00:26:59.410 --> 00:27:00.340
<v Ralph Squillace (MODULES)>Resources, right?</v>

00:27:00.350 --> 00:27:02.150
<v Ralph Squillace (MODULES)>The computers are not nearly as big.</v>

00:27:02.160 --> 00:27:03.660
<v Ralph Squillace (MODULES)>The data center is not nearly as big.</v>

00:27:03.670 --> 00:27:08.320
<v Ralph Squillace (MODULES)>They're not scalable and things like this, they're kind of fixed resources, even though they're closer to the users.</v>

00:27:09.110 --> 00:27:12.620
<v Ralph Squillace (MODULES)>So hyperlight is our answer to that.</v>

00:27:12.670 --> 00:27:14.960
<v Ralph Squillace (MODULES)>So let me find that video.</v>

00:27:16.210 --> 00:27:21.960
<v Ralph Squillace (MODULES)>Uh Mark and Cinebench uh?</v>

00:27:25.480 --> 00:27:26.520
<v Ralph Squillace (MODULES)>Do the did.</v>

00:27:26.530 --> 00:27:29.710
<v Ralph Squillace (MODULES)>Dude, you did OK.</v>

00:27:29.720 --> 00:27:30.030
<v Ralph Squillace (MODULES)>There it is.</v>

00:27:30.760 --> 00:27:33.060
<v Mario Guerra>Ralph, do you roll up to the to Ralph?</v>

00:27:33.070 --> 00:27:34.100
<v Mario Guerra>Uh, sorry to Mark.</v>

00:27:34.370 --> 00:27:35.560
<v Ralph Squillace (MODULES)>I roll up to Ralph.</v>

00:27:35.570 --> 00:27:36.150
<v Ralph Squillace (MODULES)>That is true.</v>

00:27:38.510 --> 00:27:40.020
<v Mario Guerra>Do you roll up to Mark Russinovich?</v>

00:27:41.710 --> 00:27:42.210
<v Ralph Squillace (MODULES)>I do not.</v>

00:27:43.590 --> 00:27:43.830
<v Mario Guerra>OK.</v>

00:27:45.060 --> 00:27:45.290
<v Ralph Squillace (MODULES)>So.</v>

00:27:47.300 --> 00:27:56.630
<v Ralph Squillace (MODULES)>Mark at at build gave a he gives out every year he gives his Azure innovations talk and so I've given you a link deep into that talk.</v>

00:27:56.670 --> 00:28:01.880
<v Ralph Squillace (MODULES)>There's about 3 minutes where we talk specifically about hyperlight and that.</v>

00:28:01.380 --> 00:28:04.580
<v Mario Guerra>Yes, I watched this this presentation.</v>

00:28:03.430 --> 00:28:06.450
<v Ralph Squillace (MODULES)>OK, that is my team.</v>

00:28:09.440 --> 00:28:11.570
<v Mario Guerra>OK, very cool.</v>

00:28:07.000 --> 00:28:20.260
<v Ralph Squillace (MODULES)>That infrastructure is built with rust, and it is one of the most critical scale out service hosting infrastructures we have built recently on at Microsoft.</v>

00:28:20.510 --> 00:28:34.040
<v Ralph Squillace (MODULES)>This is generally designed to be the host for any kind of super fast protect, fully protected function capability that we have next to a stack that needs to be protected.</v>

00:28:34.050 --> 00:28:42.510
<v Ralph Squillace (MODULES)>So, for example, Afd will be the closest will be running to product with this very shortly married shortly and Microsoft terms.</v>

00:28:44.650 --> 00:28:47.970
<v Ralph Squillace (MODULES)>But following there them will be Azure Data Lake.</v>

00:28:49.250 --> 00:28:52.540
<v Ralph Squillace (MODULES)>There's sequel, and let's see what else.</v>

00:28:52.550 --> 00:29:12.600
<v Ralph Squillace (MODULES)>Kusto they need to have little teeny, you know, kind of functions, custom functions that are essentially UDF that run right on the stack, like in the same blade or the next to the next on the rack next door to a particular database so that they get super high performance for a particular query.</v>

00:29:12.850 --> 00:29:18.720
<v Ralph Squillace (MODULES)>But the problem is they're taking third party code and so the only way they can do that is to use something like hyperlight.</v>

00:29:26.170 --> 00:29:26.410
<v Mario Guerra>Wow.</v>

00:29:18.730 --> 00:29:35.130
<v Ralph Squillace (MODULES)>So Hyperlight can do a VM, a bare metal VM in about 200 microseconds, which is nuts, and we just are finishing the rust bindings to this 200 microseconds, 250 microseconds is at.</v>

00:29:35.820 --> 00:29:38.650
<v Ralph Squillace (MODULES)>The is using the C bindings.</v>

00:29:39.000 --> 00:29:39.650
<v Ralph Squillace (MODULES)>An excuse me?</v>

00:29:39.660 --> 00:29:43.210
<v Ralph Squillace (MODULES)>The.net bindings, those we we wrote like a year ago.</v>

00:29:43.480 --> 00:29:51.230
<v Ralph Squillace (MODULES)>We're just finishing our rust bindings and we're expecting to lose another 100 microseconds per invocation, maybe even more.</v>

00:29:51.520 --> 00:29:55.450
<v Ralph Squillace (MODULES)>That means we can get to a bare metal micro VM.</v>

00:29:55.490 --> 00:29:56.640
<v Ralph Squillace (MODULES)>We're talking about 300 megs.</v>

00:29:57.280 --> 00:29:59.320
<v Ralph Squillace (MODULES)>Uh, it literally is bare metal.</v>

00:29:59.330 --> 00:30:01.180
<v Ralph Squillace (MODULES)>It's you get a memory strip.</v>

00:30:01.190 --> 00:30:02.220
<v Ralph Squillace (MODULES)>You got some registers.</v>

00:30:02.230 --> 00:30:06.120
<v Ralph Squillace (MODULES)>You got instruction pointer and you've got a virtual CPU.</v>

00:30:06.610 --> 00:30:07.240
<v Ralph Squillace (MODULES)>That's it.</v>

00:30:12.340 --> 00:30:13.600
<v Mario Guerra>Then you're just in memory.</v>

00:30:13.660 --> 00:30:14.480
<v Mario Guerra>There's nothing there.</v>

00:30:14.130 --> 00:30:14.530
<v Ralph Squillace (MODULES)>You just.</v>

00:30:15.220 --> 00:30:16.270
<v Ralph Squillace (MODULES)>There's nothing there.</v>

00:30:16.670 --> 00:30:17.470
<v Mario Guerra>It's the void.</v>

00:30:16.360 --> 00:30:18.360
<v Ralph Squillace (MODULES)>There's no there's there.</v>

00:30:18.370 --> 00:30:19.850
<v Ralph Squillace (MODULES)>It's a complete void.</v>

00:30:19.930 --> 00:30:28.150
<v Ralph Squillace (MODULES)>It is actually something that a company like Microsoft can do, and at and a few other companies, and not too many other people.</v>

00:30:28.440 --> 00:30:34.490
<v Ralph Squillace (MODULES)>Right is really a value add, so this is one of the big selling points for edge actions, cloud flare and fastly.</v>

00:30:34.500 --> 00:30:35.190
<v Ralph Squillace (MODULES)>Don't do that.</v>

00:30:35.520 --> 00:30:46.130
<v Ralph Squillace (MODULES)>They actually rely on the web assembly sandbox boundary for their security, for their hostile multitenant security, which as I've said before, is actually vastly better for most people than they really need.</v>

00:30:46.460 --> 00:30:51.600
<v Ralph Squillace (MODULES)>But for super professional computing, you're going to need more than that, and certainly in a public cloud.</v>

00:30:52.270 --> 00:30:57.470
<v Ralph Squillace (MODULES)>So that's what Hyperlight is, and that's where rust is our language for all of those things.</v>

00:30:58.460 --> 00:31:13.200
<v Ralph Squillace (MODULES)>Ohh and Rust is also our language for the implementations of Wasi cloud core so that serverless proposal that I'm talking about that's all in rust.</v>

00:31:13.860 --> 00:31:14.940
<v Ralph Squillace (MODULES)>Uh, what else?</v>

00:31:16.650 --> 00:31:17.460
<v Mario Guerra>Well, So what?</v>

00:31:17.920 --> 00:31:20.560
<v Mario Guerra>What I this is all fantastic stuff, by the way.</v>

00:31:21.160 --> 00:31:21.320
<v Ralph Squillace (MODULES)>Yes.</v>

00:31:20.750 --> 00:31:24.320
<v Mario Guerra>So this next sentence is not to detract very many of that.</v>

00:31:24.580 --> 00:31:25.020
<v Ralph Squillace (MODULES)>That's OK.</v>

00:31:24.430 --> 00:31:33.150
<v Mario Guerra>What I'm not hearing is is any kind of tie in for a need for Azure SDK's that are rust based, right?</v>

00:31:31.910 --> 00:31:40.080
<v Ralph Squillace (MODULES)>How lucky am I gonna call our *** **** services if I don't have a web assembly SDK that can call the the service?</v>

00:31:40.550 --> 00:31:41.410
<v Ralph Squillace (MODULES)>That's the reason.</v>

00:31:40.460 --> 00:31:41.810
<v Mario Guerra>Well, that's just it, right?</v>

00:31:41.820 --> 00:31:45.850
<v Mario Guerra>The Web assembly is the generic part, right?</v>

00:31:46.230 --> 00:31:46.430
<v Ralph Squillace (MODULES)>Yep.</v>

00:31:49.140 --> 00:31:49.300
<v Ralph Squillace (MODULES)>Yeah.</v>

00:31:45.860 --> 00:31:50.890
<v Mario Guerra>So as long as you have something that compiles to web assembly, doesn't matter what the front end language is, right?</v>

00:31:51.420 --> 00:31:51.920
<v Ralph Squillace (MODULES)>That's correct.</v>

00:31:52.470 --> 00:31:52.690
<v Mario Guerra>Right.</v>

00:31:52.700 --> 00:31:54.440
<v Mario Guerra>So it doesn't necessarily need to be rust.</v>

00:31:55.490 --> 00:31:56.860
<v Ralph Squillace (MODULES)>You missed my point.</v>

00:31:56.910 --> 00:31:57.860
<v Ralph Squillace (MODULES)>Let me explain it again.</v>

00:31:58.300 --> 00:31:58.970
<v Mario Guerra>All right.</v>

00:31:59.060 --> 00:31:59.540
<v Mario Guerra>Lay it on me.</v>

00:31:58.900 --> 00:32:06.610
<v Ralph Squillace (MODULES)>Rust rust is the premier language to create web assembly modules.</v>

00:32:08.310 --> 00:32:09.830
<v Ralph Squillace (MODULES)>Those modules are components.</v>

00:32:09.840 --> 00:32:15.030
<v Ralph Squillace (MODULES)>They can be used from javascriptor.net or you know, like anything, right?</v>

00:32:15.140 --> 00:32:18.980
<v Ralph Squillace (MODULES)>So when you think of an SDK, you're thinking of the end users language.</v>

00:32:19.520 --> 00:32:19.870
<v Mario Guerra>Uh, no.</v>

00:32:20.890 --> 00:32:21.880
<v Ralph Squillace (MODULES)>That's not my point.</v>

00:32:22.430 --> 00:32:43.760
<v Ralph Squillace (MODULES)>My point is, in order to use one SDK for 12 languages to access Azure functions, we need that SDK to be in web assembly and WASI specifically, and the language that builds that better than anything else on the planet is rust.</v>

00:32:45.320 --> 00:32:54.640
<v Ralph Squillace (MODULES)>And So what I was going to propose the the mind you when I said how the **** and all that stuff, you know, I'm I'm playing with you. Right?</v>

00:32:54.650 --> 00:32:56.170
<v Ralph Squillace (MODULES)>Like it's not a A.</v>

00:32:57.560 --> 00:33:01.740
<v Ralph Squillace (MODULES)>I'm not irritated in any way for drink, for example, but the the, the.</v>

00:33:01.800 --> 00:33:10.060
<v Ralph Squillace (MODULES)>The interesting thing here is that Wasi cloud core is 6 interfaces for six services and their generic.</v>

00:33:11.390 --> 00:33:16.460
<v Ralph Squillace (MODULES)>So you can't exploit the special functionality of an Azure service using those interfaces.</v>

00:33:17.770 --> 00:33:18.180
<v Ralph Squillace (MODULES)>OK.</v>

00:33:18.230 --> 00:33:21.350
<v Ralph Squillace (MODULES)>But they're usable from 12 languages, 15 languages, whatever.</v>

00:33:21.360 --> 00:33:37.150
<v Ralph Squillace (MODULES)>They might be usable from, and it's only one SDK like you don't have to have multi language builds in the so the the trick here is that when you're looking at this web assembly stuff from the perspective of the language, the first thing you think is how does this help my language?</v>

00:33:38.830 --> 00:33:41.360
<v Ralph Squillace (MODULES)>But that's actually, you're not your ultimate goal.</v>

00:33:41.370 --> 00:33:43.240
<v Ralph Squillace (MODULES)>Your ultimate goal is how?</v>

00:33:50.140 --> 00:33:50.280
<v Mario Guerra>Yes.</v>

00:33:43.250 --> 00:33:53.200
<v Ralph Squillace (MODULES)>Because does this language help customers use Azure services, and right now Azure has to build?</v>

00:33:53.510 --> 00:33:53.960
<v Ralph Squillace (MODULES)>I'm not.</v>

00:33:54.020 --> 00:33:55.270
<v Ralph Squillace (MODULES)>Yeah, I mean, you know this better night.</v>

00:33:55.280 --> 00:33:56.120
<v Ralph Squillace (MODULES)>You we have to.</v>

00:33:56.130 --> 00:33:56.720
<v Ralph Squillace (MODULES)>What do we have?</v>

00:33:56.730 --> 00:33:58.120
<v Ralph Squillace (MODULES)>Six official SDK's.</v>

00:33:59.440 --> 00:33:59.910
<v Mario Guerra>Oh no.</v>

00:34:00.600 --> 00:34:08.110
<v Mario Guerra>Well, when you're talking about SDK, what I'm talking about really are not SDK S They're they're basically libraries, right?</v>

00:34:08.120 --> 00:34:16.370
<v Mario Guerra>So every service has a library for languages like Python, C, Sharp, Java, JavaScript or the main ones, right?</v>

00:34:14.470 --> 00:34:17.030
<v Ralph Squillace (MODULES)>Yep, yeah, yeah.</v>

00:34:20.840 --> 00:34:21.000
<v Ralph Squillace (MODULES)>Yep.</v>

00:34:16.380 --> 00:34:21.400
<v Mario Guerra>So you can get a little library to interact with service bus in C sharp, right?</v>

00:34:21.560 --> 00:34:24.160
<v Mario Guerra>And so there are crates for rust for these things, too.</v>

00:34:24.170 --> 00:34:26.540
<v Mario Guerra>They're just not official, right?</v>

00:34:26.000 --> 00:34:27.830
<v Ralph Squillace (MODULES)>Sure, sure.</v>

00:34:28.060 --> 00:34:41.190
<v Ralph Squillace (MODULES)>And what I wanna do is I wanna give customers the ability to write in any language and compile the web assembly and consume a prebuilt web assembly component that knows how to talk to Azure cognitive services.</v>

00:34:41.200 --> 00:34:51.000
<v Ralph Squillace (MODULES)>Let's say you know, pick your pick your service and I don't want them to have to sit there and choose the SDK that we produce in the language.</v>

00:34:51.410 --> 00:35:01.490
<v Ralph Squillace (MODULES)>I want them to use one SDK component for that service from any language and that's what web assembly allows us to do yosh.</v>

00:35:09.940 --> 00:35:10.240
<v Ralph Squillace (MODULES)>Trump.</v>

00:35:02.590 --> 00:35:11.640
<v Yosh Wuyts>I think one key part here that I don't think you've quite mentioned, Ralph, but I think it is very important to highlight it is standardization.</v>

00:35:11.990 --> 00:35:21.630
<v Yosh Wuyts>So what we're doing with the WASI stuff is creating a like or we're leveraging a standard platform interface for, say, serverless functions.</v>

00:35:21.790 --> 00:35:27.720
<v Yosh Wuyts>It will be the same at Microsoft as it is at fastly, as it hopefully will be at utter cloud vendors too.</v>

00:35:28.150 --> 00:35:38.930
<v Yosh Wuyts>And what we're talking about like on the serverless platform, these things they, they need to do things right, they need access to what I call it, queues, what the the, the the queue thing.</v>

00:35:39.380 --> 00:35:42.370
<v Yosh Wuyts>Ohh man they they need database access.</v>

00:35:42.380 --> 00:35:45.930
<v Yosh Wuyts>They need access to like file storage for like persisting objects.</v>

00:35:46.220 --> 00:35:54.330
<v Yosh Wuyts>All of these things, they will go through standard interface so that the actual application code that's written is portable between vendors.</v>

00:36:00.170 --> 00:36:00.430
<v Ralph Squillace (MODULES)>Right.</v>

00:35:54.680 --> 00:36:02.790
<v Yosh Wuyts>But on our side, we need to back it with specific calls through our like utter Azure services and that needs to be done.</v>

00:36:02.800 --> 00:36:08.090
<v Yosh Wuyts>Hopefully we'll do that in web assembly, but all of our infrastructure there is in rust that makes sense to do that Martin breast as well.</v>

00:36:09.530 --> 00:36:09.900
<v Ralph Squillace (MODULES)>Right.</v>

00:36:09.910 --> 00:36:11.240
<v Ralph Squillace (MODULES)>So I would elaborate.</v>

00:36:11.250 --> 00:36:14.620
<v Ralph Squillace (MODULES)>This is interesting concept and and especially Mario.</v>

00:36:14.630 --> 00:36:19.440
<v Ralph Squillace (MODULES)>You will appreciate that there is a choice here about how you're looking at what we're talking about.</v>

00:36:20.130 --> 00:36:27.340
<v Ralph Squillace (MODULES)>So what he what Yosh is saying there is like, OK, if we have an implementation and web assembly then anybody from any language can just use that.</v>

00:36:28.250 --> 00:36:32.190
<v Ralph Squillace (MODULES)>But of course, as you point out, what does that mean about rust? Right?</v>

00:36:38.940 --> 00:36:39.280
<v Mario Guerra>Right.</v>

00:36:32.460 --> 00:36:41.220
<v Ralph Squillace (MODULES)>And the answer is, you've gotta build that web assembly somewhere and from something and your SDK.</v>

00:36:41.290 --> 00:36:51.670
<v Ralph Squillace (MODULES)>The rust one is already building, and so the only thing we really want is to get extra functionality out of the Rust SDK.</v>

00:36:52.060 --> 00:37:00.620
<v Ralph Squillace (MODULES)>It's not that we want like for example, you're not gonna replace the best SDK this way, nor are you going to replace the Python SDK, at least not you know or the something else right?</v>

00:37:01.020 --> 00:37:02.510
<v Ralph Squillace (MODULES)>At least, right not right away.</v>

00:37:02.520 --> 00:37:04.760
<v Ralph Squillace (MODULES)>Maybe in five years you might, but not now.</v>

00:37:05.930 --> 00:37:08.930
<v Ralph Squillace (MODULES)>And what you're gonna do is you're gonna say. All you're rust.</v>

00:37:08.940 --> 00:37:15.180
<v Ralph Squillace (MODULES)>Customers can grab the crate and do and go to town on cognitive services or whatever it might be.</v>

00:37:15.190 --> 00:37:16.000
<v Ralph Squillace (MODULES)>Data lake, whatever.</v>

00:37:17.260 --> 00:37:36.570
<v Ralph Squillace (MODULES)>But the real question is, can you use the same code and compile that same crate that any language can use, not just rust and all of a sudden Microsoft customers in these services don't have to know rust or use an SDK, or even include extra language.</v>

00:37:37.400 --> 00:37:40.300
<v Ralph Squillace (MODULES)>The stuff just works from any of them.</v>

00:37:39.300 --> 00:37:40.550
<v Mario Guerra>OK, I think I see.</v>

00:37:42.760 --> 00:37:43.010
<v Ralph Squillace (MODULES)>Umm.</v>

00:37:41.120 --> 00:37:48.960
<v Mario Guerra>Let me make sure I'm following cause I think what you're saying is like right now the the paradigm is you build a client model, let's say forget about rust for a second.</v>

00:37:48.970 --> 00:37:49.950
<v Mario Guerra>Let's say it's Python.</v>

00:37:50.240 --> 00:37:57.610
<v Mario Guerra>You build a client model to interact with the service, and that client model has all the CRUD operations and whatnot, and you can call them Python.</v>

00:37:57.620 --> 00:38:05.270
<v Mario Guerra>Actually, let's say and and write your code in a way where under the hood that Python gets translated to a rest call that goes and hits the service.</v>

00:38:05.280 --> 00:38:05.610
<v Mario Guerra>Right.</v>

00:38:05.680 --> 00:38:12.520
<v Mario Guerra>What we're talking about here is this client would actually be ohh, it wasn't client, right?</v>

00:38:12.530 --> 00:38:29.540
<v Mario Guerra>So there, this client would basically be compiled to wasm and that will be the piece that goes through the little the pipeline that will get you to the service through the do to do the CRUD operations, let's say right to build that Wassim client.</v>

00:38:37.240 --> 00:38:37.400
<v Ralph Squillace (MODULES)>Yeah.</v>

00:38:30.310 --> 00:38:40.480
<v Mario Guerra>Right now we need some higher level language for lack of a better term like rust like C sharp or whatever that we can use to to build a client and then that gets compiled down.</v>

00:38:50.780 --> 00:38:53.640
<v Ralph Squillace (MODULES)>To the wisdom stuff. Yeah.</v>

00:38:40.590 --> 00:38:54.140
<v Mario Guerra>And what you're saying is that once you have that Wasm client, technically any language should be able to use it as long as it can bind properly to that client, right? Right.</v>

00:38:53.690 --> 00:38:58.880
<v Ralph Squillace (MODULES)>So the Wasi and the component model stuff that I started out with, that's the wasm stuff they bind to.</v>

00:38:58.890 --> 00:39:01.260
<v Ralph Squillace (MODULES)>If they speak Wasi right?</v>

00:39:01.310 --> 00:39:09.400
<v Ralph Squillace (MODULES)>If that language does, could be zig, dart swift, you know, like one of these funky languages the kids come up with.</v>

00:39:19.030 --> 00:39:19.310
<v Mario Guerra>Right.</v>

00:39:11.240 --> 00:39:20.670
<v Ralph Squillace (MODULES)>You know, if it speaks WASI, they now have an SDK to Azure even though we didn't build one and so.</v>

00:39:20.740 --> 00:39:25.670
<v Ralph Squillace (MODULES)>But the problem is we gotta build that that WASI SDK that you call it a client.</v>

00:39:25.680 --> 00:39:35.260
<v Ralph Squillace (MODULES)>I'm so I think of it as the functional equivalent equivalent to the Rust crate for to connect to Azure Cognitive services.</v>

00:39:35.540 --> 00:39:35.790
<v Mario Guerra>Mm-hmm.</v>

00:39:35.400 --> 00:39:37.090
<v Ralph Squillace (MODULES)>Let's say again an example.</v>

00:39:37.820 --> 00:39:46.920
<v Ralph Squillace (MODULES)>Well, if we compile that, cognitive services create 2 targets, 1 to Rust Crate for the rust people.</v>

00:39:47.230 --> 00:39:48.350
<v Ralph Squillace (MODULES)>OK, you got your rust crate.</v>

00:39:48.360 --> 00:39:50.790
<v Ralph Squillace (MODULES)>Go ahead and you know, use that, right?</v>

00:39:50.930 --> 00:39:58.000
<v Ralph Squillace (MODULES)>But two compile is same code to a WASI component target because rust does that really well.</v>

00:39:59.490 --> 00:40:08.170
<v Ralph Squillace (MODULES)>OK, then you're, you know, like your standard customers, the ones where normally thinking about the rust customers, for example, are gonna have their crates.</v>

00:40:08.180 --> 00:40:09.110
<v Ralph Squillace (MODULES)>That doesn't change.</v>

00:40:09.120 --> 00:40:11.380
<v Ralph Squillace (MODULES)>Nothing changes for them, right?</v>

00:40:12.050 --> 00:40:34.820
<v Ralph Squillace (MODULES)>But the zig customer who comes in some startup that we don't really care about because they're not an enterprise customer, they're writing a small check, but before they would go to some other place that let them do fancy things and they wanna do zig and we say, you know what, we've got WASI component for your Azure cognitive consumption and you can use it from zinc.</v>

00:40:36.390 --> 00:40:37.940
<v Mario Guerra>How would they get that Wasi component?</v>

00:40:39.770 --> 00:40:41.950
<v Mario Guerra>Would we ship that as a client?</v>

00:40:38.980 --> 00:40:42.680
<v Ralph Squillace (MODULES)>Well, it would be and ohh yeah, yeah, you would.</v>

00:40:42.690 --> 00:40:43.610
<v Ralph Squillace (MODULES)>It would be an MCR.</v>

00:40:44.630 --> 00:40:47.440
<v Ralph Squillace (MODULES)>It's treated as a, so the component is a module.</v>

00:40:47.450 --> 00:40:48.580
<v Ralph Squillace (MODULES)>It's a binary file.</v>

00:40:48.590 --> 00:41:00.290
<v Ralph Squillace (MODULES)>It has a bunch of metadata around it and the whole thing, and just like any other artifact, something that Microsoft officially produces that's open source to for your use would be published in MCR, and they we.</v>

00:41:00.330 --> 00:41:11.420
<v Ralph Squillace (MODULES)>So for example, all the akas stuff that that I mentioned here, the modules for those things are all in ACR and ACR G ACR everything.</v>

00:41:11.430 --> 00:41:17.470
<v Ralph Squillace (MODULES)>If you want to use those, you just use OCI and all the app models that are there.</v>

00:41:17.770 --> 00:41:24.170
<v Ralph Squillace (MODULES)>Docker desktop, for example, builds web assembly using the same infrastructure that we built, right?</v>

00:41:24.280 --> 00:41:28.430
<v Ralph Squillace (MODULES)>And you can push and pull to Docker hub your web assembly module.</v>

00:41:29.060 --> 00:41:34.020
<v Ralph Squillace (MODULES)>So because you know, I mean like it the, the the experience for Kubernetes is transparent.</v>

00:41:34.750 --> 00:41:36.320
<v Ralph Squillace (MODULES)>You literally don't know the difference.</v>

00:41:36.330 --> 00:41:47.100
<v Ralph Squillace (MODULES)>You point in an in and an image you know at in ACR MC or whatever, so that WASI component that we built out of the Rust SDK for service X and service.</v>

00:41:47.110 --> 00:41:48.700
<v Ralph Squillace (MODULES)>Why and Azure right?</v>

00:41:49.110 --> 00:41:52.330
<v Ralph Squillace (MODULES)>Those components would just live in MCR like normal.</v>

00:41:54.390 --> 00:41:54.670
<v Mario Guerra>Right.</v>

00:41:57.680 --> 00:41:58.330
<v Ralph Squillace (MODULES)>Microsoft.</v>

00:41:54.680 --> 00:41:58.510
<v Mario Guerra>I have to ask because I don't know what does MCR, Microsoft Container Registry?</v>

00:42:01.470 --> 00:42:01.690
<v Mario Guerra>OK.</v>

00:41:58.340 --> 00:42:05.010
<v Ralph Squillace (MODULES)>Well used to be Microsoft content registry, but now I think it's a MAR Microsoft artifact registry.</v>

00:42:05.120 --> 00:42:09.150
<v Ralph Squillace (MODULES)>Microsoft Artifact Registry is so you know ACR Azure content registry, right?</v>

00:42:09.820 --> 00:42:10.120
<v Mario Guerra>Umm.</v>

00:42:10.600 --> 00:42:10.850
<v Ralph Squillace (MODULES)>Uh.</v>

00:42:10.860 --> 00:42:11.630
<v Ralph Squillace (MODULES)>Container registry.</v>

00:42:11.710 --> 00:42:12.500
<v Mario Guerra>Container registry.</v>

00:42:11.640 --> 00:42:13.130
<v Ralph Squillace (MODULES)>Excuse me. Yeah.</v>

00:42:14.110 --> 00:42:26.400
<v Ralph Squillace (MODULES)>So MC R is essentially Microsoft's kind of Docker hub for things that we produce that are intended to be consumed by our customers.</v>

00:42:26.710 --> 00:42:32.230
<v Ralph Squillace (MODULES)>So for example, the official Docker image for net is hosted in MCR.</v>

00:42:32.980 --> 00:42:33.260
<v Mario Guerra>OK.</v>

00:42:33.760 --> 00:42:39.270
<v Ralph Squillace (MODULES)>It's not in Docker hub there's there's an entry in Docker hub and what it does is it points it.</v>

00:42:39.310 --> 00:42:41.340
<v Ralph Squillace (MODULES)>If you click it, it'll take you to MCR.</v>

00:42:41.350 --> 00:42:42.320
<v Ralph Squillace (MODULES)>So you can download it there.</v>

00:42:43.590 --> 00:42:55.590
<v Ralph Squillace (MODULES)>And so we have that public registry and like, you're rust crates or the NPM install, you know, MODULES for Microsoft stuff, those things all exist in.</v>

00:42:56.170 --> 00:43:00.510
<v Ralph Squillace (MODULES)>Uh MAR Microsoft Artifact registry, officially.</v>

00:43:02.800 --> 00:43:03.020
<v Mario Guerra>OK.</v>

00:43:05.390 --> 00:43:07.680
<v Ralph Squillace (MODULES)>The crates undoubtedly are on crates. IO.</v>

00:43:07.690 --> 00:43:09.040
<v Ralph Squillace (MODULES)>I don't know what do we do.</v>

00:43:08.830 --> 00:43:09.140
<v Mario Guerra>Right.</v>

00:43:09.050 --> 00:43:11.090
<v Ralph Squillace (MODULES)>We host our do we host our stuff on crates?</v>

00:43:11.100 --> 00:43:11.280
<v Ralph Squillace (MODULES)>IO.</v>

00:43:11.670 --> 00:43:11.970
<v Mario Guerra>We do.</v>

00:43:12.720 --> 00:43:13.130
<v Ralph Squillace (MODULES)>Yeah.</v>

00:43:13.180 --> 00:43:17.430
<v Ralph Squillace (MODULES)>So basically OCI will host anything, right?</v>

00:43:17.560 --> 00:43:32.550
<v Ralph Squillace (MODULES)>So, because they they now support artifacts generally, which means you can push and pull anything to an OCI registry, so creates his language specific WASI components are like containers or helm charts or other things that are now being stored.</v>

00:43:32.640 --> 00:43:33.940
<v Ralph Squillace (MODULES)>They can be stored in OCI.</v>

00:43:34.740 --> 00:43:35.020
<v Mario Guerra>Right.</v>

00:43:43.870 --> 00:43:46.110
<v Ralph Squillace (MODULES)>Yes. Yeah.</v>

00:43:35.030 --> 00:43:48.980
<v Mario Guerra>So you're envisioning a world where the we deliver client models, but the pieces that I can actually talk to the service as wasm, and then people came as long as we, I don't know how the binding works.</v>

00:43:48.990 --> 00:43:53.480
<v Mario Guerra>I guess we have to publish an interface for a language or is or how does it like?</v>

00:43:52.540 --> 00:43:54.050
<v Ralph Squillace (MODULES)>No, no, no, not for a language.</v>

00:43:53.490 --> 00:43:54.490
<v Mario Guerra>So how does it binding?</v>

00:43:54.060 --> 00:43:54.730
<v Ralph Squillace (MODULES)>No, no, no.</v>

00:43:55.220 --> 00:43:58.030
<v Ralph Squillace (MODULES)>So the way it'll work even more easily than that.</v>

00:44:02.770 --> 00:44:02.980
<v Mario Guerra>Mm-hmm.</v>

00:43:58.040 --> 00:44:33.980
<v Ralph Squillace (MODULES)>So all you have to do, and I'm talking about you, but I'm using it like all we do, Microsoft in this case, the vision that the thing that I would love to have is really the way to put it on all all customers would do is say, hey, is there a wazzie component that knows how to talk to Azure cognitive services and they would look at Microsoft Artifact registry and or they you know we would do that or they could look at the, you know the wasm component WASI component registry, which would have a whole bunch of metadata about various components as well.</v>

00:44:34.150 --> 00:44:48.150
<v Ralph Squillace (MODULES)>Well, I would assume we would register there and they would find it and they would say if they were in rust, right, they would say Carlo component add to their project and it would just go get that thing and put it in the project.</v>

00:45:00.160 --> 00:45:00.750
<v Mario Guerra>Is that.</v>

00:45:00.880 --> 00:45:01.810
<v Mario Guerra>Is that true though?</v>

00:44:48.160 --> 00:45:02.060
<v Ralph Squillace (MODULES)>And since Rust knows how to speak web assembly, they would just code in their rust and use the web assembly interfaces, and you know that would just all run the the compilation would would run.</v>

00:45:01.820 --> 00:45:07.640
<v Mario Guerra>Does rust rust compiles down to web assembly, but when you say, rust knows how to speak web assembly.</v>

00:45:10.890 --> 00:45:11.360
<v Ralph Squillace (MODULES)>He'll show.</v>

00:45:08.670 --> 00:45:11.990
<v Mario Guerra>Is that what technically correct?</v>

00:45:11.370 --> 00:45:12.020
<v Ralph Squillace (MODULES)>Would you say it?</v>

00:45:13.460 --> 00:45:16.060
<v Yosh Wuyts>Uh, the patent?</v>

00:45:16.630 --> 00:45:18.750
<v Yosh Wuyts>It depends on the the way you're looking at it.</v>

00:45:19.130 --> 00:45:21.040
<v Yosh Wuyts>So rust compiles down to web assembly.</v>

00:45:21.130 --> 00:45:25.320
<v Yosh Wuyts>So what web assembly is inherently intended to be like polyglot?</v>

00:45:25.610 --> 00:45:35.580
<v Yosh Wuyts>Like any language, should be able to compile down to web assembly and then but also consume other or like consume other like web assembly modules.</v>

00:45:35.770 --> 00:45:38.430
<v Yosh Wuyts>So it's you can think of it as like linking to each other.</v>

00:45:39.350 --> 00:45:40.960
<v Mario Guerra>Yes, that's what I'm getting to.</v>

00:45:40.970 --> 00:45:41.260
<v Mario Guerra>Is like.</v>

00:45:41.570 --> 00:45:42.090
<v Ralph Squillace (MODULES)>Ohh OK.</v>

00:45:41.270 --> 00:45:43.660
<v Mario Guerra>How would you link in a wasm module?</v>

00:45:43.670 --> 00:45:48.810
<v Mario Guerra>Into whatever language you want to use that we say.</v>

00:45:55.170 --> 00:45:55.410
<v Mario Guerra>Mm-hmm.</v>

00:45:47.970 --> 00:45:59.680
<v Ralph Squillace (MODULES)>That each language each language is learning to speak WASI which is that interface format right now and it would essentially be an import statement.</v>

00:46:00.820 --> 00:46:02.300
<v Mario Guerra>Ah, OK, so the WASI.</v>

00:46:09.860 --> 00:46:10.000
<v Ralph Squillace (MODULES)>Yep.</v>

00:46:02.340 --> 00:46:11.690
<v Mario Guerra>So we would so then there would be an interface like like let's say like if we were talking C or C++, this would be a header file that defines the interface.</v>

00:46:12.330 --> 00:46:12.470
<v Ralph Squillace (MODULES)>Yeah.</v>

00:46:11.780 --> 00:46:18.600
<v Mario Guerra>The surface of the API, so to speak for the WASI component or wasm component.</v>

00:46:19.650 --> 00:46:19.870
<v Ralph Squillace (MODULES)>Yep.</v>

00:46:18.610 --> 00:46:25.610
<v Mario Guerra>I don't know what the right terminology is here, but umm, OK alright, that makes sense right?</v>

00:46:24.830 --> 00:46:26.510
<v Ralph Squillace (MODULES)>Yep. Umm.</v>

00:46:25.620 --> 00:46:35.120
<v Mario Guerra>So if we define that and then the the language the the parser knows how to translate that into a format that is compatible with whatever language it is.</v>

00:46:36.110 --> 00:46:36.310
<v Ralph Squillace (MODULES)>Yep.</v>

00:46:35.430 --> 00:46:39.000
<v Mario Guerra>Then you could just build it like, import that component into.</v>

00:46:39.010 --> 00:46:47.440
<v Mario Guerra>Let's say you're rust code and take the wasi interface module or or file or whatever, and it would say OK, I know how to speak to this.</v>

00:46:47.450 --> 00:46:57.370
<v Mario Guerra>I will build in the interfaces and allow you to call directly into this component and I'll compile down to a format that knows how to talk to this thing.</v>

00:46:58.230 --> 00:46:58.860
<v Ralph Squillace (MODULES)>Yeah.</v>

00:46:58.930 --> 00:47:02.850
<v Ralph Squillace (MODULES)>So for example, here is the.</v>

00:47:04.210 --> 00:47:06.680
<v Ralph Squillace (MODULES)>Interface specific interface.</v>

00:47:07.290 --> 00:47:09.050
<v Ralph Squillace (MODULES)>Thank you for that yosh.</v>

00:47:09.690 --> 00:47:14.360
<v Ralph Squillace (MODULES)>Uh, now I'm rolling back and forth between Yosh yosh and yeah, sure.</v>

00:47:14.370 --> 00:47:17.200
<v Ralph Squillace (MODULES)>Something I'm going to like, you know, I'm going to make a new names for you.</v>

00:47:17.700 --> 00:47:18.100
<v Yosh Wuyts>That's OK.</v>

00:47:18.050 --> 00:47:20.550
<v Ralph Squillace (MODULES)>That interface is the definition of a.</v>

00:47:19.750 --> 00:47:20.950
<v Mario Guerra>Just don't call them Yoshi.</v>

00:47:21.520 --> 00:47:22.160
<v Ralph Squillace (MODULES)>Exactly.</v>

00:47:23.020 --> 00:47:30.370
<v Ralph Squillace (MODULES)>Uh, but that interface, for example, is just a very simple key value store interface, right?</v>

00:47:31.100 --> 00:47:44.810
<v Ralph Squillace (MODULES)>That is literally an API that each language chain will understand how to interpret and convert imports and exports into the language specific versions that they're dealing with.</v>

00:47:44.820 --> 00:47:58.460
<v Ralph Squillace (MODULES)>So if you're y'all and you're using building an app in rust, right, it would cargo component ad that that world, and then from the rust you'd say.</v>

00:47:59.780 --> 00:48:01.390
<v Ralph Squillace (MODULES)>However, this would work, you'd say.</v>

00:48:01.400 --> 00:48:02.050
<v Ralph Squillace (MODULES)>OK.</v>

00:48:02.060 --> 00:48:08.860
<v Ralph Squillace (MODULES)>I wanna call WASI key value dot read write right looking at that particular interface.</v>

00:48:09.070 --> 00:48:17.640
<v Ralph Squillace (MODULES)>For example, umm, there's a lot more detail and you can go through this fax if you wish, but the point is that that is like that is the component interface.</v>

00:48:17.810 --> 00:48:29.180
<v Ralph Squillace (MODULES)>Now each language, all they have to learn is how to read wide and how to convert wit into their own types data structures.</v>

00:48:29.280 --> 00:48:31.440
<v Ralph Squillace (MODULES)>You know that kind of stuff invocation form.</v>

00:48:30.620 --> 00:48:34.040
<v Yosh Wuyts>Where wit is the header file format that WASI uses.</v>

00:48:33.930 --> 00:48:34.210
<v Mario Guerra>Right.</v>

00:48:33.710 --> 00:48:36.390
<v Ralph Squillace (MODULES)>And when is the header file format that you're talking about?</v>

00:48:36.540 --> 00:48:39.520
<v Mario Guerra>Was that stand for something like Wasi interface type or?</v>

00:48:40.150 --> 00:48:42.000
<v Ralph Squillace (MODULES)>That web assembly interface types?</v>

00:48:42.310 --> 00:48:42.550
<v Mario Guerra>OK.</v>

00:48:42.010 --> 00:48:43.440
<v Ralph Squillace (MODULES)>That's exactly what it stands for.</v>

00:48:44.550 --> 00:48:45.180
<v Mario Guerra>All right, cool.</v>

00:48:48.660 --> 00:49:00.990
<v Ralph Squillace (MODULES)>The in that in this world here the rust work that we're doing for Azure could provide an output for these kinds of new markets.</v>

00:49:01.000 --> 00:49:10.450
<v Ralph Squillace (MODULES)>And new developers, no matter what language they're using to communicate with Azure function Azure functionality, and that could include rust.</v>

00:49:10.520 --> 00:49:14.090
<v Ralph Squillace (MODULES)>But if you were writing in rust, maybe you just used the rust azsdk right?</v>

00:49:14.630 --> 00:49:18.010
<v Ralph Squillace (MODULES)>You might just grab the crate and use it directly.</v>

00:49:18.020 --> 00:49:38.980
<v Ralph Squillace (MODULES)>You wouldn't have to use web assembly, but that what we really need is the extra work that rust can do to produce these interface and implementations for these services, where if we tried to do it a different way, like if we do it the normal Microsoft Way, Amazon does the same thing.</v>

00:49:38.990 --> 00:49:45.450
<v Ralph Squillace (MODULES)>I'm sure Google too, which is like let's say all these services take off and everybody's into web assembly, right?</v>

00:49:45.460 --> 00:49:47.020
<v Ralph Squillace (MODULES)>It's the coolest thing since sliced bread.</v>

00:49:47.860 --> 00:49:53.930
<v Ralph Squillace (MODULES)>Odds are that that's not gonna happen yet, but it is beginning to interest people, right?</v>

00:49:53.940 --> 00:49:57.110
<v Ralph Squillace (MODULES)>As I said, we do have real customers who are who are taking this on.</v>

00:49:58.470 --> 00:49:58.930
<v Ralph Squillace (MODULES)>Umm.</v>

00:49:59.920 --> 00:50:04.940
<v Ralph Squillace (MODULES)>If that happens, somebody's gonna come to the SDK team and say, OK, now I want you to produce a WASI SDK.</v>

00:50:07.540 --> 00:50:07.870
<v Ralph Squillace (MODULES)>Right.</v>

00:50:08.300 --> 00:50:14.770
<v Ralph Squillace (MODULES)>And it'll be treated like a language right next to rust, right next to Python, right next to Java, right next to .net.</v>

00:50:14.920 --> 00:50:16.490
<v Ralph Squillace (MODULES)>And it's gonna be the same thing.</v>

00:50:16.500 --> 00:50:20.560
<v Ralph Squillace (MODULES)>We just replicated in other ecosystem, but here we have an advantage.</v>

00:50:21.670 --> 00:50:26.560
<v Ralph Squillace (MODULES)>We're actually building this stuff already in a language that can compile to web assembly.</v>

00:50:26.610 --> 00:50:28.670
<v Ralph Squillace (MODULES)>We don't have to reimplement anything.</v>

00:50:29.680 --> 00:50:39.800
<v Ralph Squillace (MODULES)>We can actually just use the work we're already doing, compile out to a different target, and then we have maximized our impact on developer usability.</v>

00:50:40.060 --> 00:50:41.410
<v Ralph Squillace (MODULES)>But we haven't changed anything.</v>

00:50:41.420 --> 00:50:43.250
<v Ralph Squillace (MODULES)>We didn't add new developers.</v>

00:50:43.400 --> 00:50:46.710
<v Ralph Squillace (MODULES)>We didn't add new pipeline in the larger sense.</v>

00:50:46.720 --> 00:50:53.040
<v Ralph Squillace (MODULES)>There's no new repo for the width stuff as opposed to the rust or as opposed to the Python as opposed to everything else.</v>

00:50:54.470 --> 00:51:04.370
<v Ralph Squillace (MODULES)>We don't have to like figure out what is the new pipeline to grab the swagger and convert most of it out and then do hand massaging to make it idiomatic and all.</v>

00:51:04.380 --> 00:51:07.100
<v Ralph Squillace (MODULES)>Like we don't have to do any of that stuff, just cause poop.</v>

00:51:08.060 --> 00:51:11.040
<v Ralph Squillace (MODULES)>Just get this for free is kind of an added benefit.</v>

00:51:13.710 --> 00:51:16.340
<v Mario Guerra>OK, this is all very interesting.</v>

00:51:18.880 --> 00:51:19.430
<v Ralph Squillace (MODULES)>Yeah.</v>

00:51:19.500 --> 00:51:22.090
<v Ralph Squillace (MODULES)>So the the the debt.</v>

00:51:16.350 --> 00:51:25.200
<v Mario Guerra>So there's a lot that you on here and I have to figure out if there's a way to kind of leverage this into making rust and official language.</v>

00:51:25.300 --> 00:51:27.870
<v Mario Guerra>But I think I think this is cool.</v>

00:51:27.150 --> 00:51:30.120
<v Ralph Squillace (MODULES)>So, so here's here's the deal.</v>

00:51:31.660 --> 00:51:36.310
<v Ralph Squillace (MODULES)>There's a couple of ways to sort of, you know, kind of preload this in your mind to chew on.</v>

00:51:37.030 --> 00:51:51.500
<v Ralph Squillace (MODULES)>One is the CDN functions are WASI full for full featured Wasi and as we want to add functions you will not be able to add an SDK there because it will not call out directly.</v>

00:51:52.760 --> 00:51:57.650
<v Ralph Squillace (MODULES)>Maybe you will not be able to bring more code that sits there and waits for these services and stuff.</v>

00:51:57.900 --> 00:52:04.300
<v Ralph Squillace (MODULES)>You will only be able to use web assembly components in order to do this stuff, and there's a couple of reasons for that, but it's not important.</v>

00:52:05.140 --> 00:52:15.210
<v Ralph Squillace (MODULES)>CDN is already CDN and CDN functions at cloud flare and fastly are already a $1 billion cloud flare made $1 billion last year.</v>

00:52:15.600 --> 00:52:24.910
<v Ralph Squillace (MODULES)>The market is 25 billion total for CDN and it's projected to grow another 10 billion very, very shortly in the next two years.</v>

00:52:24.920 --> 00:52:36.560
<v Ralph Squillace (MODULES)>Three years functions will be the main portion of the that growth because people are on front end or realizing you can write 50 or 60% of your functionality of your website can be on the CDN.</v>

00:52:36.630 --> 00:52:40.220
<v Ralph Squillace (MODULES)>They don't actually have to go back to origin, which means you can save money.</v>

00:52:40.510 --> 00:52:51.100
<v Ralph Squillace (MODULES)>You can not only pay for your latency increase because you have to pay for CDN but you recoup the CDN cost by removing all that network egress.</v>

00:52:52.540 --> 00:52:53.260
<v Mario Guerra>Yeah. OK.</v>

00:52:53.580 --> 00:52:53.880
<v Ralph Squillace (MODULES)>Right.</v>

00:52:54.290 --> 00:53:02.520
<v Ralph Squillace (MODULES)>So from the customer standpoint, going moving the CDN gets you faster speed with no rearchitecture really still just HD.</v>

00:53:02.530 --> 00:53:08.400
<v Ralph Squillace (MODULES)>You know HTTP file, HTML files and a little bit of JavaScript and crap, plus some extra functions.</v>

00:53:08.830 --> 00:53:17.390
<v Ralph Squillace (MODULES)>You get dramatically better latency without architecture change and you get to save all your egress costs and your hyperscale compute.</v>

00:53:27.040 --> 00:53:30.440
<v Ralph Squillace (MODULES)>Here HTML and yeah, yeah, that's what we thought about.</v>

00:53:18.000 --> 00:53:31.390
<v Mario Guerra>So just to be clear, So what we're talking about here, so CDN typically content delivery networks, that's usually like, hey, I'm gonna store my images and GIFs and whatever docs and whatever the static stuff, the static stuff right close to the customer.</v>

00:53:31.790 --> 00:53:32.270
<v Ralph Squillace (MODULES)>That's right.</v>

00:53:36.620 --> 00:53:38.170
<v Ralph Squillace (MODULES)>Because yeah.</v>

00:53:31.960 --> 00:53:39.290
<v Mario Guerra>But we're saying is like, well, we can actually do some compute on the CDN side and small little bits and offload some of that.</v>

00:53:39.700 --> 00:53:40.170
<v Mario Guerra>OK.</v>

00:53:40.570 --> 00:53:40.990
<v Mario Guerra>All right.</v>

00:53:40.970 --> 00:53:41.340
<v Ralph Squillace (MODULES)>Yes.</v>

00:53:41.530 --> 00:53:45.180
<v Ralph Squillace (MODULES)>And that that Mark Russinovich demo that. Yeah.</v>

00:53:41.000 --> 00:53:45.380
<v Mario Guerra>And then only pass back to, let's say Azure, the heavy lifting stuff.</v>

00:53:45.970 --> 00:53:46.340
<v Ralph Squillace (MODULES)>Yeah.</v>

00:53:46.350 --> 00:53:50.930
<v Ralph Squillace (MODULES)>So then, then, then, then what happens is we can actually begin with web assembly.</v>

00:53:50.940 --> 00:53:57.150
<v Ralph Squillace (MODULES)>But what we want is we need a web assembly component for those people when we start adding the ability, we don't have it yet.</v>

00:53:57.530 --> 00:54:13.900
<v Ralph Squillace (MODULES)>When we add the ability to invoke hyperscale services from CDN right, people will want that and they'll want it from every language and we don't want seven different language SDK to give them that functionality.</v>

00:54:13.910 --> 00:54:14.840
<v Ralph Squillace (MODULES)>We want one thing.</v>

00:54:20.540 --> 00:54:20.880
<v Mario Guerra>OK.</v>

00:54:17.070 --> 00:54:41.960
<v Ralph Squillace (MODULES)>And that is web assembly, because that's what we're running there and more importantly, that same module because of the way we're designing all the services, that same module and the SDK module, the little calling module that we're talking about can be lifted up and picked up and put into AKS or eventually Azure functions or any other compute at Microsoft will be able to run that out of the box.</v>

00:54:43.010 --> 00:54:44.840
<v Ralph Squillace (MODULES)>No recompile, no nothing.</v>

00:54:45.200 --> 00:54:47.790
<v Ralph Squillace (MODULES)>Same module, but a Bing bada boom.</v>

00:54:49.040 --> 00:54:56.270
<v Ralph Squillace (MODULES)>And it will because of it will be because of the Rust SDK that we can do that without adding resources to the SDK team.</v>

00:54:56.740 --> 00:55:04.510
<v Ralph Squillace (MODULES)>No more extra heads, no more nothing, and all of a sudden all the other languages get coverage without even having to do any extra work.</v>

00:55:04.580 --> 00:55:25.030
<v Ralph Squillace (MODULES)>So another way to think about this is if in fact I go to the Go SDK team or they like, you know, like.net.net like classic Microsoft thing, ok.net is gonna ship web assembly WASI functionality in version 8 as a preview, which is the end of November.</v>

00:55:26.160 --> 00:55:38.590
<v Ralph Squillace (MODULES)>This functionality will run in CDN in under 10 microseconds and it's very very small, so we can do really cool things we couldn't do before with .net, but it will put .net inside web assembly.</v>

00:55:39.870 --> 00:55:44.190
<v Ralph Squillace (MODULES)>So think about it from the seat the the Microsoft SDK point of view.</v>

00:55:45.060 --> 00:55:48.690
<v Ralph Squillace (MODULES)>Ohh well gosh I guess for that we have to have a.</v>

00:55:48.740 --> 00:55:51.540
<v Ralph Squillace (MODULES)>You gotta bring the SDK from the .net team in there.</v>

00:55:52.440 --> 00:55:52.600
<v Ralph Squillace (MODULES)>No.</v>

00:55:53.530 --> 00:55:58.240
<v Ralph Squillace (MODULES)>You can use the same SDK that rust produced for them.</v>

00:56:13.040 --> 00:56:13.200
<v Mario Guerra>Yeah.</v>

00:56:01.130 --> 00:56:16.500
<v Ralph Squillace (MODULES)>The same one you don't have to go and figure out how the as the the the.net SDK has got to be compiled into web assembly or how it compiles into web assembly because you're using it from C But you're putting all of your C in the web assembly in order to execute.</v>

00:56:23.480 --> 00:56:23.660
<v Ralph Squillace (MODULES)>Yep.</v>

00:56:15.550 --> 00:56:26.910
<v Mario Guerra>So as long as you have the the width file and your language supports import of wit MODULES, then you're good, right? OK.</v>

00:56:32.100 --> 00:56:32.320
<v Mario Guerra>Right.</v>

00:56:25.770 --> 00:56:32.390
<v Ralph Squillace (MODULES)>Yep, I mean the implementation you need the width file is the definition for your developers to use like the like.</v>

00:56:32.400 --> 00:56:37.350
<v Ralph Squillace (MODULES)>When you do an import and then start composing, you know start start developing against the import right?</v>

00:56:37.560 --> 00:56:37.780
<v Mario Guerra>Umm.</v>

00:56:37.360 --> 00:56:39.740
<v Ralph Squillace (MODULES)>Like OK new HTTP client.</v>

00:56:39.750 --> 00:56:40.740
<v Ralph Squillace (MODULES)>You know that kind of stuff.</v>

00:56:41.030 --> 00:56:46.070
<v Ralph Squillace (MODULES)>But the point here is that at execution time you have the implementation as well, right?</v>

00:56:47.080 --> 00:56:51.790
<v Ralph Squillace (MODULES)>And this is just rust compiling to web assembly in addition to rust.</v>

00:56:53.100 --> 00:56:59.620
<v Ralph Squillace (MODULES)>That's it, but only rust can do this effectively right now, and that's the critical aspect.</v>

00:56:59.630 --> 00:57:00.750
<v Ralph Squillace (MODULES)>And when when?</v>

00:56:59.480 --> 00:57:01.210
<v Mario Guerra>Right, right now, right.</v>

00:57:01.220 --> 00:57:03.190
<v Mario Guerra>But C sharp is coming right?</v>

00:57:04.060 --> 00:57:04.520
<v Ralph Squillace (MODULES)>Getting.</v>

00:57:03.200 --> 00:57:08.470
<v Mario Guerra>So Microsoft being Microsoft once C sharp is like up to speed.</v>

00:57:08.940 --> 00:57:12.120
<v Mario Guerra>Do we really think that Microsoft is going to care about rust?</v>

00:57:10.910 --> 00:57:14.130
<v Ralph Squillace (MODULES)>No, no, no.</v>

00:57:14.140 --> 00:57:19.270
<v Ralph Squillace (MODULES)>In fact, the thing here is that rust is going to become more important in Microsoft rapidly.</v>

00:57:19.440 --> 00:57:21.290
<v Ralph Squillace (MODULES)>It already is, and we know that.</v>

00:57:21.300 --> 00:57:27.790
<v Ralph Squillace (MODULES)>But then Microsoft doesn't say we have a massive customer like Walmart saying, hey, give me an official Rust SDK right?</v>

00:57:27.850 --> 00:57:29.130
<v Ralph Squillace (MODULES)>Like, that's the difference.</v>

00:57:29.500 --> 00:57:34.870
<v Ralph Squillace (MODULES)>We are at the cusp of rust being the Microsoft systems level language.</v>

00:57:35.380 --> 00:57:50.020
<v Ralph Squillace (MODULES)>Now that web assembly is going to be one of the things that pushes rust into the space, in addition to the work that's happening with like Windows kernel and, you know, rust is in the Linux kernel now and stuff and all this kind of stuff, right?</v>

00:57:50.150 --> 00:57:53.160
<v Ralph Squillace (MODULES)>So you know better than I all the places where rust is going.</v>

00:57:53.470 --> 00:58:03.910
<v Ralph Squillace (MODULES)>That thing that makes Microsoft invest in a Rust SDK is going to be things like it can do rust, but also web assembly for everyone.</v>

00:58:05.470 --> 00:58:13.650
<v Ralph Squillace (MODULES)>It makes no difference to Microsoft whether if they already have rust compiling to .net and you know like to web assembly.</v>

00:58:13.660 --> 00:58:15.160
<v Ralph Squillace (MODULES)>Excuse me. Right.</v>

00:58:15.270 --> 00:58:25.630
<v Ralph Squillace (MODULES)>It makes no difference to Microsoft to try and create a SDK with C sharp just to compile to the same thing.</v>

00:58:26.990 --> 00:58:28.560
<v Mario Guerra>I mean, I know it makes no sense.</v>

00:58:28.610 --> 00:58:32.380
<v Mario Guerra>I I or no difference, I get that this is Microsoft though, right?</v>

00:58:32.390 --> 00:58:35.450
<v Mario Guerra>So C sharp is Microsoft's bread and butter.</v>

00:58:33.370 --> 00:58:36.000
<v Ralph Squillace (MODULES)>Yeah, but we're not that stupid.</v>

00:58:36.090 --> 00:58:36.930
<v Ralph Squillace (MODULES)>We're stupid.</v>

00:58:37.170 --> 00:58:40.040
<v Ralph Squillace (MODULES)>We're no, we're stupid, but we're not that stupid.</v>

00:58:40.330 --> 00:58:42.940
<v Ralph Squillace (MODULES)>And then I will tell, I'll tell you another thing.</v>

00:58:42.950 --> 00:58:44.040
<v Ralph Squillace (MODULES)>Rust can do this right now.</v>

00:58:44.850 --> 00:58:45.030
<v Mario Guerra>Yeah.</v>

00:58:45.550 --> 00:58:51.470
<v Ralph Squillace (MODULES)>C Sharp will not be able to do what we're talking about for another two years, right?</v>

00:58:51.650 --> 00:58:57.770
<v Ralph Squillace (MODULES)>And so just on the fact that if we have this in 2 years and Microsoft is saying.</v>

00:58:57.780 --> 00:59:11.250
<v Ralph Squillace (MODULES)>Let's take up a little spin up a completely new team to use this completely new version of C sharp so that we can compile down to the same thing we've been delivering for two years with no extra infrastructure, with no extra cost.</v>

00:59:11.600 --> 00:59:13.000
<v Ralph Squillace (MODULES)>No, not gonna happen.</v>

00:59:12.790 --> 00:59:15.150
<v Mario Guerra>Didn't you just say that they're going to preview in November?</v>

00:59:22.330 --> 00:59:22.590
<v Mario Guerra>OK.</v>

00:59:16.210 --> 00:59:22.690
<v Ralph Squillace (MODULES)>Yeah, that's a preview of very early stuff that is extremely limited and format, right.</v>

00:59:22.760 --> 00:59:27.900
<v Ralph Squillace (MODULES)>So they'll be able to do things that we can do in AFD, but they can't do generalized compute.</v>

00:59:29.520 --> 00:59:36.670
<v Ralph Squillace (MODULES)>So they like the way to think about this is the version they're going to implement will have support for Wasi cloud core stuff.</v>

00:59:37.050 --> 00:59:37.650
<v Ralph Squillace (MODULES)>OK.</v>

00:59:44.020 --> 00:59:44.260
<v Mario Guerra>OK.</v>

00:59:37.720 --> 00:59:44.730
<v Ralph Squillace (MODULES)>But if they wanna use Azure cognitive services, no, not going to do you know, like that's not gonna work, right.</v>

00:59:45.620 --> 00:59:47.970
<v Ralph Squillace (MODULES)>And so it's gonna take them a few years.</v>

00:59:48.160 --> 00:59:49.730
<v Ralph Squillace (MODULES)>That was outstanding, yosh.</v>

00:59:52.880 --> 00:59:54.140
<v Yosh Wuyts>Sorry, didn't even register.</v>

00:59:54.150 --> 00:59:55.770
<v Yosh Wuyts>I was like, that's normal.</v>

00:59:49.740 --> 00:59:55.930
<v Ralph Squillace (MODULES)>I didn't know whether you're putting on a feather hat or like that was just that was just great.</v>

00:59:55.940 --> 00:59:56.590
<v Ralph Squillace (MODULES)>I loved it.</v>

00:59:58.420 --> 01:00:06.430
<v Ralph Squillace (MODULES)>So the the thing there is that it's not immediately clearthat.net will be able to generalize.</v>

01:00:06.440 --> 01:00:17.770
<v Ralph Squillace (MODULES)>Nuget, like Rust, can now rust, can sit there, and pretty much and say like I can take almost any code and and put it in my web assembly module.</v>

01:00:17.890 --> 01:00:23.580
<v Ralph Squillace (MODULES)>More or less, there's like with Wasi and components, there's things you can't yet do and things like that.</v>

01:00:23.590 --> 01:00:36.010
<v Ralph Squillace (MODULES)>But outside of that, everything that was you can do, rust can put it in a component and it also is the initial language of implementation, because rust is used to build all this ****. Right?</v>

01:00:36.870 --> 01:00:55.710
<v Ralph Squillace (MODULES)>So that means that basically as soon as web assembly has more functionality like in the next three months or so, we're gonna get sockets right and file access and that's gonna be probably the big single biggest missing thing outside of full threading model, which will come after that.</v>

01:01:02.170 --> 01:01:02.320
<v Mario Guerra>And.</v>

01:00:55.790 --> 01:01:07.350
<v Ralph Squillace (MODULES)>That so once you have all that stuff, .net can actually then do probably full Nuget, but .net will do it like you know a year after, right, they'll they'll let it settle there.</v>

01:01:07.360 --> 01:01:07.600
<v Ralph Squillace (MODULES)>So.</v>

01:01:21.490 --> 01:01:21.770
<v Mario Guerra>OK.</v>

01:01:07.710 --> 01:01:26.570
<v Ralph Squillace (MODULES)>So this is gonna be a preview, but very limited functionality in .net and so that's why I say it's gonna be a year and a half to twoyearsbefore.net is able to do what we could do with rust probably now more, more or less with the same code base you already have.</v>

01:01:27.540 --> 01:01:27.980
<v Mario Guerra>So there.</v>

01:01:27.240 --> 01:01:30.040
<v Ralph Squillace (MODULES)>And we can use that in AKS.</v>

01:01:30.050 --> 01:01:40.100
<v Ralph Squillace (MODULES)>We could sit there and say this is how you connect to all your stuff when you're using web assembly in Azure Kubernetes service, you use the stuff from the Rust SDK.</v>

01:01:41.320 --> 01:01:50.660
<v Mario Guerra>OK, so to that end, is there anything that you or your team or anyone you customers are going to need in the next three months that I should get on with the Azure SDK team?</v>

01:01:51.550 --> 01:01:51.840
<v Ralph Squillace (MODULES)>No.</v>

01:01:53.130 --> 01:01:55.300
<v Ralph Squillace (MODULES)>So here's what I would like to do.</v>

01:01:55.310 --> 01:01:57.210
<v Ralph Squillace (MODULES)>This is what Ralph perfect world right.</v>

01:01:57.330 --> 01:01:57.720
<v Mario Guerra>Hmm.</v>

01:01:57.220 --> 01:01:58.140
<v Ralph Squillace (MODULES)>Like so, Mario.</v>

01:01:58.510 --> 01:02:00.270
<v Ralph Squillace (MODULES)>Tell me to go to hell if this doesn't work.</v>

01:02:02.260 --> 01:02:25.110
<v Ralph Squillace (MODULES)>What I would like to do is for you to put this in your brain and think about how it works and talk with the you know all the people and you know, and certainly the people that know how to compile because there are going to be some things that don't compile directly out and we have to do some if Dev kind of stuff to make sure that we got whatever workaround is necessary for web assembly just because of the way that the.</v>

01:02:26.620 --> 01:02:30.120
<v Ralph Squillace (MODULES)>Preview currently is, but you know Yosh is going to be one of those people.</v>

01:02:30.130 --> 01:02:30.610
<v Ralph Squillace (MODULES)>Who knows?</v>

01:02:30.620 --> 01:02:33.390
<v Ralph Squillace (MODULES)>Knows quite a bit about what might need to be done there.</v>

01:02:33.930 --> 01:02:49.080
<v Ralph Squillace (MODULES)>However, outside of that, really, the next three months we wanna, you know what I would really like to do is be able to lay a dependency on you for germanium to compile out WASI to the Azure SDK.</v>

01:02:49.090 --> 01:02:56.380
<v Ralph Squillace (MODULES)>The Rust SDK we'll we'll select a limited set of high value targets for services, right?</v>

01:02:55.900 --> 01:02:58.480
<v Mario Guerra>OK, now you're talking alright.</v>

01:03:05.700 --> 01:03:05.900
<v Mario Guerra>Yeah.</v>

01:02:57.570 --> 01:03:17.530
<v Ralph Squillace (MODULES)>And not the whole not the whole SDK like let's take let's take reasonable steps that are are customers really wanna use you know for services customers and we all or germanium will all put a dependency on you to produce a WASI SDK for that set from the Rust compilation platform.</v>

01:03:18.030 --> 01:03:18.390
<v Mario Guerra>OK.</v>

01:03:17.770 --> 01:03:29.840
<v Ralph Squillace (MODULES)>And I will go to bat and I will tell Brendan Burns to weigh in and ask for that dependency because we need it for AKS and our and our also going to need to for IoT, right?</v>

01:03:29.500 --> 01:03:31.240
<v Mario Guerra>All right, let's do it.</v>

01:03:31.750 --> 01:03:32.950
<v Ralph Squillace (MODULES)>That's what I would like to do.</v>

01:03:35.300 --> 01:03:35.540
<v Ralph Squillace (MODULES)>OK.</v>

01:03:31.400 --> 01:03:37.110
<v Mario Guerra>So I need to drop for another meeting, but I will follow up with you on the dependency, cause.</v>

01:03:37.120 --> 01:03:38.340
<v Mario Guerra>Yeah, I think we should do it.</v>

01:03:38.780 --> 01:03:39.680
<v Mario Guerra>Well, we will do it.</v>

01:03:39.500 --> 01:03:46.700
<v Ralph Squillace (MODULES)>Simple send me your dependency creation link and I'll I'll I'll prop prop one for germanium and then we can argue over the details.</v>

01:03:47.180 --> 01:03:48.090
<v Mario Guerra>OK, you got it.</v>

01:03:48.860 --> 01:03:49.560
<v Ralph Squillace (MODULES)>Sounds great.</v>

01:03:48.550 --> 01:03:49.890
<v Mario Guerra>Well, thank you, Ralph.</v>

01:03:49.940 --> 01:03:51.970
<v Mario Guerra>And yosh, I appreciate both your time.</v>

01:03:52.190 --> 01:03:53.250
<v Mario Guerra>It's been really helpful.</v>

01:03:53.460 --> 01:03:54.420
<v Mario Guerra>Got a lot to digest.</v>

01:03:54.430 --> 01:03:56.630
<v Mario Guerra>I'm sure they'll be other questions, but this is good for now.</v>

01:03:56.050 --> 01:03:56.720
<v Ralph Squillace (MODULES)>Yeah, yeah, sure.</v>

01:03:56.640 --> 01:03:56.960
<v Mario Guerra>Thank you.</v>

01:03:57.910 --> 01:03:58.250
<v Mario Guerra>All right.</v>

01:03:57.910 --> 01:04:00.640
<v Ralph Squillace (MODULES)>Here's my you know, thanks for your patience and high heat.</v>

01:04:01.210 --> 01:04:01.880
<v Mario Guerra>All right, bye.</v>

01:04:01.360 --> 01:04:02.790
<v Yosh Wuyts>Thanks much bye.</v>
